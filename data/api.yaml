openapi: 3.0.2
info:
  contact:
    email: support@enablehr.com
    name: enableHR Support Team
    url: https://support.enablehr.com
  description: enableHR & HRA Cloud API endpoint.
  title: enableHR & HRA Cloud API
  version: 1.0.0
servers:
- description: enablehr & HRA Cloud API servers
  url: https://rest.{application}.com/
  variables:
    application:
      default: enablehr
      description: The application the API is integrating with
      enum:
      - enablehr
      - hrassured
tags:
- description: Operations relating to branches (business units or locations) with
    in account
  name: Branches
- description: Operations for checking the API services health.
  name: Health Checks
- description: Operations relating to employees within an account.
  name: Employees
- description: Operations relating to reference (rarely changing) data within the
    system or an account.
  name: Reference Data
- description: Operations relating to users within an account.
  name: Users
paths:
  /ping:
    get:
      description: Checks the health of the client facing API server, including connectivity
        to any underlying API servers, databases or file servers.
      operationId: Ping
      responses:
        "200":
          content:
            application/json:
              schema:
                example: UP - 12345
                type: string
          description: Server is healthy and all necessary services are available.
        "500":
          description: |
            An error occured while processing the request.
            If you're reading this spec, chances are you know it's not you, it's us - if it keeps happening, let us know what's happening and we'll sort you.
      summary: Pings the server
      tags:
      - Health Checks
  /users/self:
    get:
      description: |
        This endpoint provides details of the current user (currently only username).

        **NOTE:** This API is subject to change, specifically it will change from a String to an object representing the full details of the user in a future release.
      operationId: RetrieveCurrentUser
      responses:
        "200":
          content:
            application/json:
              schema:
                description: The currently authenticated user's username
                example: hr@example.com
                type: string
          description: Returns the authenticated user's name.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemResponse'
          description: The user or client authentication failed.
        "500":
          description: |
            An error occured while processing the request.
            If you're reading this spec, chances are you know it's not you, it's us - if it keeps happening, let us know what's happening and we'll sort you.
      summary: Retrieves the current user
      tags:
      - Users
  /accounts/self:
    get:
      description: |
        Returns information about the user authenticated with by the current JWT.

        **Note:** This API is subject to change, in future releases it will return a JSON object with richer account details.
      operationId: RetrieveCurrentAccount
      responses:
        "200":
          content:
            application/json:
              schema:
                description: The currently authenticated user's account ID
                example: 4eb62cb48c9f429c93bc26664c1a5a4d
                type: string
          description: Account information
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemResponse'
          description: The user or client authentication failed.
        "500":
          description: |
            An error occured while processing the request.
            If you're reading this spec, chances are you know it's not you, it's us - if it keeps happening, let us know what's happening and we'll sort you.
      summary: Retrieves the current account
      tags:
      - Accounts
  /accounts/{accountId}/action-status/{actionStatusId}:
    get:
      description: Returns a status of an action in an account accessible to the authenticated
        user.
      operationId: ActionStatuses
      parameters:
      - allowEmptyValue: false
        description: Unique identifier of an account.
        example: 4eb62cb48c9f429c93bc26664c1a5a4d
        in: path
        name: accountId
        required: true
        schema:
          type: string
      - allowEmptyValue: false
        description: Unique identifier of an action status.
        example: 4eb62cb48c9f429c93bc26664c1a5a4d
        in: path
        name: actionStatusId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionStatusDetail'
          description: The user or client is authenticated, but does not have access
            ot the requested resource.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemResponse'
          description: The user or client authentication failed.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemResponse'
          description: The user or client is authenticated, but does not have access
            ot the requested resource.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemResponse'
          description: The specified object was not found, or is inaccessible to the
            authenticated user or client
        "500":
          description: |
            An error occured while processing the request.
            If you're reading this spec, chances are you know it's not you, it's us - if it keeps happening, let us know what's happening and we'll sort you.
      security:
      - OAuth2:
        - read:accounts:referencedata
      summary: Retrieve Action Status
      tags:
      - Accounts
    parameters:
    - allowEmptyValue: false
      description: Unique identifier of an account.
      example: 4eb62cb48c9f429c93bc26664c1a5a4d
      in: path
      name: accountId
      required: true
      schema:
        type: string
    - allowEmptyValue: false
      description: Unique identifier of an action status.
      example: 4eb62cb48c9f429c93bc26664c1a5a4d
      in: path
      name: actionStatusId
      required: true
      schema:
        type: string
  /accounts/{accountId}/branches:
    get:
      description: Returns an (optionally) filtered list of all branches in an account
        accessible to the authenticated user.
      operationId: ListBranches
      parameters:
      - description: |
          A search string that contains `field:values` together with boolean operators, which can be used to filter the result.

           An asterix (`*`) can also be used as a wildcard for partial matches on words.
           Logical operators (`AND` and `OR`) can be used between terms.
           Terms can be grouped via parenthesis to build complex search queries (see examples below).

           The fields used in the field must be fields returned from the REST API endpoint.

           Some example filters:
           * `firstName:John` which would return employees whose firstName was John.
           * `surname:Smith OR surname:Klein` which would return employees whose surname was either Smith or Klein.
           * `surname:Smi*` which would return employees whose surname is Smith, Smits, Smithe, etc.
           * `type:LegalEntity AND postcode:2000` which would return all branches that are Legal Entities and in postcode 2000.
           * `postcode:2000 OR postcode:3000` which would return all branches in either postcode of 2000 or in postcode 3000.
           * `type:LegalEntity AND (postcode:2000 OR postcode:3000)` which would return all branches that are Legal Entities and in postcode 2000 or 3000.
        example: name:Scottie*
        in: query
        name: filter
        required: false
        schema:
          type: string
      - description: |
          WIP Description

          Specify the field, followed by asc/desc, separated by :
        example: sort=name:asc&sort=type:desc
        explode: true
        in: query
        name: sort
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: |
          WIP Description

          Pagination: Indicates the number of items that would be in the results.
          NB: Pagination would be invalidated if the filter/sort parms change on a subsequent call.
        example: 100
        in: query
        name: first
        required: false
        schema:
          format: int32
          type: integer
      - description: |
          WIP Description

          Pagination: Start Cursor for the requested Page.
          NB: Pagination would be invalidated if the filter/sort parms change on a subsequent call.
        example: 342dfs09ds329320
        in: query
        name: after
        required: false
        schema:
          type: string
      - description: |
          WIP Description

          Pagination: Indicates the number of items that would be in the results
          NB: Pagination would be invalidated if the filter/sort parms change on a subsequent call.
        example: 100
        in: query
        name: last
        required: false
        schema:
          format: int32
          type: integer
      - description: |
          WIP Description

          Pagination: End Cursor for the requested Page.
          NB: Pagination would be invalidated if the filter/sort parms change on a subsequent call.
        example: 531dfs09ds332932
        in: query
        name: before
        required: false
        schema:
          type: string
      - allowEmptyValue: false
        description: Unique identifier of an account.
        example: 4eb62cb48c9f429c93bc26664c1a5a4d
        in: path
        name: accountId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BranchesPage'
          description: The request was successful, the response contains an an array
            of branches (in summary form) in the account, wrapped in pagination information.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemResponse'
          description: The user or client authentication failed.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemResponse'
          description: The user or client is authenticated, but does not have access
            ot the requested resource.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemResponse'
          description: The specified object was not found, or is inaccessible to the
            authenticated user or client
        "500":
          description: |
            An error occured while processing the request.
            If you're reading this spec, chances are you know it's not you, it's us - if it keeps happening, let us know what's happening and we'll sort you.
      security:
      - OAuth2:
        - read:accounts:referencedata
      summary: Lists branches
      tags:
      - Branches
    parameters:
    - allowEmptyValue: false
      description: Unique identifier of an account.
      example: 4eb62cb48c9f429c93bc26664c1a5a4d
      in: path
      name: accountId
      required: true
      schema:
        type: string
  /accounts/{accountId}/branches/{branchId}:
    get:
      description: Retrieves a specific branch given the `accountId` and `branchId`.
      operationId: RetrieveBranch
      parameters:
      - allowEmptyValue: false
        description: Unique identifier of an account.
        example: 4eb62cb48c9f429c93bc26664c1a5a4d
        in: path
        name: accountId
        required: true
        schema:
          type: string
      - allowEmptyValue: false
        description: Unique identifier of a branch within an account.
        example: d5117655c5814a0fb8ee2e9ed9d6d384
        in: path
        name: branchId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BranchDetail'
          description: The request was successful, the response contains the full
            detail of an individual branch.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemResponse'
          description: The user or client authentication failed.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemResponse'
          description: The user or client is authenticated, but does not have access
            ot the requested resource.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemResponse'
          description: The specified object was not found, or is inaccessible to the
            authenticated user or client
        "500":
          description: |
            An error occured while processing the request.
            If you're reading this spec, chances are you know it's not you, it's us - if it keeps happening, let us know what's happening and we'll sort you.
      security:
      - OAuth2:
        - read:accounts:referencedata
      summary: Retrieves a branch
      tags:
      - Branches
    parameters:
    - allowEmptyValue: false
      description: Unique identifier of an account.
      example: 4eb62cb48c9f429c93bc26664c1a5a4d
      in: path
      name: accountId
      required: true
      schema:
        type: string
    - allowEmptyValue: false
      description: Unique identifier of a branch within an account.
      example: d5117655c5814a0fb8ee2e9ed9d6d384
      in: path
      name: branchId
      required: true
      schema:
        type: string
  /accounts/{accountId}/employees:
    get:
      description: Returns an (optionally) filtered list of all employees in an account
        accessible to the authenticated user.
      operationId: ListEmployees
      parameters:
      - description: |
          A search string that contains `field:values` together with boolean operators, which can be used to filter the result.

           An asterix (`*`) can also be used as a wildcard for partial matches on words.
           Logical operators (`AND` and `OR`) can be used between terms.
           Terms can be grouped via parenthesis to build complex search queries (see examples below).

           The fields used in the field must be fields returned from the REST API endpoint.

           Some example filters:
           * `firstName:John` which would return employees whose firstName was John.
           * `surname:Smith OR surname:Klein` which would return employees whose surname was either Smith or Klein.
           * `surname:Smi*` which would return employees whose surname is Smith, Smits, Smithe, etc.
           * `type:LegalEntity AND postcode:2000` which would return all branches that are Legal Entities and in postcode 2000.
           * `postcode:2000 OR postcode:3000` which would return all branches in either postcode of 2000 or in postcode 3000.
           * `type:LegalEntity AND (postcode:2000 OR postcode:3000)` which would return all branches that are Legal Entities and in postcode 2000 or 3000.
        example: name:Scottie*
        in: query
        name: filter
        required: false
        schema:
          type: string
      - description: |
          WIP Description

          Specify the field, followed by asc/desc, separated by :
        example: sort=name:asc&sort=type:desc
        explode: true
        in: query
        name: sort
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: |
          WIP Description

          Pagination: Indicates the number of items that would be in the results.
          NB: Pagination would be invalidated if the filter/sort parms change on a subsequent call.
        example: 100
        in: query
        name: first
        required: false
        schema:
          format: int32
          type: integer
      - description: |
          WIP Description

          Pagination: Start Cursor for the requested Page.
          NB: Pagination would be invalidated if the filter/sort parms change on a subsequent call.
        example: 342dfs09ds329320
        in: query
        name: after
        required: false
        schema:
          type: string
      - description: |
          WIP Description

          Pagination: Indicates the number of items that would be in the results
          NB: Pagination would be invalidated if the filter/sort parms change on a subsequent call.
        example: 100
        in: query
        name: last
        required: false
        schema:
          format: int32
          type: integer
      - description: |
          WIP Description

          Pagination: End Cursor for the requested Page.
          NB: Pagination would be invalidated if the filter/sort parms change on a subsequent call.
        example: 531dfs09ds332932
        in: query
        name: before
        required: false
        schema:
          type: string
      - allowEmptyValue: false
        description: Unique identifier of an account.
        example: 4eb62cb48c9f429c93bc26664c1a5a4d
        in: path
        name: accountId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeesPage'
          description: The request was successful, the response contains an array
            of employees (in summary form) in the account, wrapped in pagination information.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemResponse'
          description: The user or client authentication failed.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemResponse'
          description: The user or client is authenticated, but does not have access
            ot the requested resource.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemResponse'
          description: The specified object was not found, or is inaccessible to the
            authenticated user or client
        "500":
          description: |
            An error occured while processing the request.
            If you're reading this spec, chances are you know it's not you, it's us - if it keeps happening, let us know what's happening and we'll sort you.
      security:
      - OAuth2:
        - read:employees
      summary: Lists employees
      tags:
      - Employees
    parameters:
    - allowEmptyValue: false
      description: Unique identifier of an account.
      example: 4eb62cb48c9f429c93bc26664c1a5a4d
      in: path
      name: accountId
      required: true
      schema:
        type: string
    post:
      description: |
        Creates a new employee.

        The following fields are mandatory for this request:
            * First Name (`firstName`)
            * Surname (`surname`)
            * Branch ID (`branchId`)
      operationId: CreateEmployee
      parameters:
      - allowEmptyValue: false
        description: Unique identifier of an account.
        example: 4eb62cb48c9f429c93bc26664c1a5a4d
        in: path
        name: accountId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmployeeInputDetail'
        description: Details of the employee to be created.
        required: true
      responses:
        "201":
          description: Employee created successfully
          headers:
            Location:
              description: The location header will provide the canonical reference
                to the created employee
              example: https://rest.enablehr.com/accounts/4eb62cb48c9f429c93bc26664c1a5a4d/employees/2dccadd0b8504cf98aeb0321e3bcf88e
              schema:
                type: string
        "400":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ProblemResponse'
                type: array
          description: The request was invalid due to incorrect or missing information
            in the body.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemResponse'
          description: The user or client authentication failed.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemResponse'
          description: The user or client is authenticated, but does not have access
            ot the requested resource.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemResponse'
          description: The specified object was not found, or is inaccessible to the
            authenticated user or client
        "500":
          description: |
            An error occured while processing the request.
            If you're reading this spec, chances are you know it's not you, it's us - if it keeps happening, let us know what's happening and we'll sort you.
      security:
      - OAuth2:
        - manage:employees
      summary: Creates a new employee
      tags:
      - Employees
  /accounts/{accountId}/employees/{employeeId}/bank-accounts:
    get:
      description: |
        Retrieves an employees bank details.  All bank details are retrieved as an array
        of bank details
      operationId: RetrieveEmployeeBankAccounts
      parameters:
      - allowEmptyValue: false
        description: Unique identifier of an account.
        example: 4eb62cb48c9f429c93bc26664c1a5a4d
        in: path
        name: accountId
        required: true
        schema:
          type: string
      - allowEmptyValue: false
        description: Unique identifier of an employee within an account.
        example: b48c9f429c93bc26664c1a5a4d1273
        in: path
        name: employeeId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeeBankAccounts'
          description: The request was successful, the response contains the all bank
            details for an individual employee.
        "400":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ProblemResponse'
                type: array
          description: The request was invalid due to incorrect or missing information
            in the body.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemResponse'
          description: The user or client authentication failed.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemResponse'
          description: The user or client is authenticated, but does not have access
            ot the requested resource.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemResponse'
          description: The specified object was not found, or is inaccessible to the
            authenticated user or client
        "500":
          description: |
            An error occured while processing the request.
            If you're reading this spec, chances are you know it's not you, it's us - if it keeps happening, let us know what's happening and we'll sort you.
      security:
      - OAuth2:
        - read:employees:payroll
      summary: Retrieves an employees bank details
      tags:
      - Employees
    parameters:
    - allowEmptyValue: false
      description: Unique identifier of an account.
      example: 4eb62cb48c9f429c93bc26664c1a5a4d
      in: path
      name: accountId
      required: true
      schema:
        type: string
    - allowEmptyValue: false
      description: Unique identifier of an employee within an account.
      example: b48c9f429c93bc26664c1a5a4d1273
      in: path
      name: employeeId
      required: true
      schema:
        type: string
    put:
      description: |
        Updates the list of employees bank details

        The following fields are mandatory for this request:
            * Bank Account ID (`id`)
            * BSB (`bsb`)
            * Account Number (`number`)
            * Account Name (`name`)
            * Statement Text (`statementText`)
            * Remainder (`remainder`)
      operationId: MaintainEmployeeBankAccounts
      parameters:
      - allowEmptyValue: false
        description: Unique identifier of an account.
        example: 4eb62cb48c9f429c93bc26664c1a5a4d
        in: path
        name: accountId
        required: true
        schema:
          type: string
      - allowEmptyValue: false
        description: Unique identifier of an employee within an account.
        example: b48c9f429c93bc26664c1a5a4d1273
        in: path
        name: employeeId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmployeeBankAccountsInput'
        description: Details of the employee to be updated.
        required: true
      responses:
        "204":
          description: Employee Bank Details updated successfully
        "400":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ProblemResponse'
                type: array
          description: The request was invalid due to incorrect or missing information
            in the body.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemResponse'
          description: The user or client authentication failed.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemResponse'
          description: The user or client is authenticated, but does not have access
            ot the requested resource.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemResponse'
          description: The specified object was not found, or is inaccessible to the
            authenticated user or client
        "500":
          description: |
            An error occured while processing the request.
            If you're reading this spec, chances are you know it's not you, it's us - if it keeps happening, let us know what's happening and we'll sort you.
      security:
      - OAuth2:
        - manage:employees:payroll
      summary: Creates/Updates/Deletes employees bank accounts
      tags:
      - Employees
  /accounts/{accountId}/employees/{employeeId}/leave-balances:
    get:
      description: |
        Retrieves an employees leave balances
      operationId: RetrieveEmployeeLeaveBalances
      parameters:
      - allowEmptyValue: false
        description: Unique identifier of an account.
        example: 4eb62cb48c9f429c93bc26664c1a5a4d
        in: path
        name: accountId
        required: true
        schema:
          type: string
      - allowEmptyValue: false
        description: Unique identifier of an employee within an account.
        example: b48c9f429c93bc26664c1a5a4d1273
        in: path
        name: employeeId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeeLeaveBalanceDetail'
          description: The request was successful, the response contains the full
            detail of an employees leave balance
        "400":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ProblemResponse'
                type: array
          description: The request was invalid due to incorrect or missing information
            in the body.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemResponse'
          description: The user or client authentication failed.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemResponse'
          description: The user or client is authenticated, but does not have access
            ot the requested resource.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemResponse'
          description: The specified object was not found, or is inaccessible to the
            authenticated user or client
        "500":
          description: |
            An error occured while processing the request.
            If you're reading this spec, chances are you know it's not you, it's us - if it keeps happening, let us know what's happening and we'll sort you.
      security:
      - OAuth2:
        - read:employees:payroll
      summary: Retrieves an employees leave balances
      tags:
      - Employees
    parameters:
    - allowEmptyValue: false
      description: Unique identifier of an account.
      example: 4eb62cb48c9f429c93bc26664c1a5a4d
      in: path
      name: accountId
      required: true
      schema:
        type: string
    - allowEmptyValue: false
      description: Unique identifier of an employee within an account.
      example: b48c9f429c93bc26664c1a5a4d1273
      in: path
      name: employeeId
      required: true
      schema:
        type: string
    put:
      description: |
        Creates/Updates the list of employees leave balances.  If the leave balances exist
        they will be updated otherwise they will be created.

        The following fields are mandatory for this request:
            * Annual Leave (`annualLeave`)
            * Personal Leave (`personalLeave`)
            * Long Service Leave (`longServiceLeave`)
      operationId: MaintainEmployeeLeaveBalances
      parameters:
      - allowEmptyValue: false
        description: Unique identifier of an account.
        example: 4eb62cb48c9f429c93bc26664c1a5a4d
        in: path
        name: accountId
        required: true
        schema:
          type: string
      - allowEmptyValue: false
        description: Unique identifier of an employee within an account.
        example: b48c9f429c93bc26664c1a5a4d1273
        in: path
        name: employeeId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmployeeLeaveBalancesInput'
        description: Details of the employee leave balances to be created/updated.
        required: true
      responses:
        "204":
          description: Employee Leave Balances created/updated successfully
        "400":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ProblemResponse'
                type: array
          description: The request was invalid due to incorrect or missing information
            in the body.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemResponse'
          description: The user or client authentication failed.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemResponse'
          description: The user or client is authenticated, but does not have access
            ot the requested resource.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemResponse'
          description: The specified object was not found, or is inaccessible to the
            authenticated user or client
        "500":
          description: |
            An error occured while processing the request.
            If you're reading this spec, chances are you know it's not you, it's us - if it keeps happening, let us know what's happening and we'll sort you.
      security:
      - OAuth2:
        - manage:employees:payroll
      summary: Creates/Updates employees leave balances
      tags:
      - Employees
  /accounts/{accountId}/employees/{employeeId}:
    get:
      description: Retrieves a specific employee given the `accountId` and `employeeId`.
      operationId: RetrieveEmployee
      parameters:
      - allowEmptyValue: false
        description: Unique identifier of an account.
        example: 4eb62cb48c9f429c93bc26664c1a5a4d
        in: path
        name: accountId
        required: true
        schema:
          type: string
      - allowEmptyValue: false
        description: Unique identifier of an employee within an account.
        example: b48c9f429c93bc26664c1a5a4d1273
        in: path
        name: employeeId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeeDetail'
          description: The request was successful, the response contains the full
            detail of an individual employee.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemResponse'
          description: The user or client authentication failed.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemResponse'
          description: The user or client is authenticated, but does not have access
            ot the requested resource.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemResponse'
          description: The specified object was not found, or is inaccessible to the
            authenticated user or client
        "500":
          description: |
            An error occured while processing the request.
            If you're reading this spec, chances are you know it's not you, it's us - if it keeps happening, let us know what's happening and we'll sort you.
      security:
      - OAuth2:
        - read:employees
      summary: Retrieves an employee
      tags:
      - Employees
    parameters:
    - allowEmptyValue: false
      description: Unique identifier of an account.
      example: 4eb62cb48c9f429c93bc26664c1a5a4d
      in: path
      name: accountId
      required: true
      schema:
        type: string
    - allowEmptyValue: false
      description: Unique identifier of an employee within an account.
      example: b48c9f429c93bc26664c1a5a4d1273
      in: path
      name: employeeId
      required: true
      schema:
        type: string
    put:
      description: |
        Updates a particular employee given the `accountId` and `employeeId`.

        This is a complete update (the majority of fields in the body are required, or else they will be saved as null).

        **Note:** Some changes are ignored in this process:
          * Employment Status (eg Current -> Terminated)
          * Changing branch IDs

        These will be introduced as explicit actions (as they require more information than just the status change) in a future release.
      operationId: UpdateEmployee
      parameters:
      - allowEmptyValue: false
        description: Unique identifier of an account.
        example: 4eb62cb48c9f429c93bc26664c1a5a4d
        in: path
        name: accountId
        required: true
        schema:
          type: string
      - allowEmptyValue: false
        description: Unique identifier of an employee within an account.
        example: b48c9f429c93bc26664c1a5a4d1273
        in: path
        name: employeeId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmployeeInputDetail'
        description: Details of the employee to be updated.
        required: true
      responses:
        "204":
          description: Employee updated successfully
        "400":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ProblemResponse'
                type: array
          description: The request was invalid due to incorrect or missing information
            in the body.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemResponse'
          description: The user or client authentication failed.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemResponse'
          description: The user or client is authenticated, but does not have access
            ot the requested resource.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemResponse'
          description: The specified object was not found, or is inaccessible to the
            authenticated user or client
        "500":
          description: |
            An error occured while processing the request.
            If you're reading this spec, chances are you know it's not you, it's us - if it keeps happening, let us know what's happening and we'll sort you.
      security:
      - OAuth2:
        - manage:employees
      summary: Updates an employee
      tags:
      - Employees
  /accounts/{accountId}/employees/{employeeId}/actions/transfer:
    parameters:
    - allowEmptyValue: false
      description: Unique identifier of an account.
      example: 4eb62cb48c9f429c93bc26664c1a5a4d
      in: path
      name: accountId
      required: true
      schema:
        type: string
    - allowEmptyValue: false
      description: Unique identifier of an employee within an account.
      example: b48c9f429c93bc26664c1a5a4d1273
      in: path
      name: employeeId
      required: true
      schema:
        type: string
    post:
      description: |
        Transfers an employee.

        The following fields are mandatory for this request:
            * Transfer Type (`transferType`)
            * To Branch ID  (`toBranchId`)
      operationId: TransferEmployee
      parameters:
      - allowEmptyValue: false
        description: Unique identifier of an account.
        example: 4eb62cb48c9f429c93bc26664c1a5a4d
        in: path
        name: accountId
        required: true
        schema:
          type: string
      - allowEmptyValue: false
        description: Unique identifier of an employee within an account.
        example: b48c9f429c93bc26664c1a5a4d1273
        in: path
        name: employeeId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmployeeTransferInputDetail'
        description: Fields needed to facilitate the employees transfer.
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionStatusResponse'
          description: The status response.
        "400":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ProblemResponse'
                type: array
          description: The request was invalid due to incorrect or missing information
            in the body.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemResponse'
          description: The user or client authentication failed.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemResponse'
          description: The user or client is authenticated, but does not have access
            ot the requested resource.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemResponse'
          description: The specified object was not found, or is inaccessible to the
            authenticated user or client
        "500":
          description: |
            An error occured while processing the request.
            If you're reading this spec, chances are you know it's not you, it's us - if it keeps happening, let us know what's happening and we'll sort you.
      security:
      - OAuth2:
        - manage:employees
      summary: Transfers an employee
      tags:
      - Employees
  /accounts/{accountId}/employees/{employeeId}/actions/terminate:
    parameters:
    - allowEmptyValue: false
      description: Unique identifier of an account.
      example: 4eb62cb48c9f429c93bc26664c1a5a4d
      in: path
      name: accountId
      required: true
      schema:
        type: string
    - allowEmptyValue: false
      description: Unique identifier of an employee within an account.
      example: b48c9f429c93bc26664c1a5a4d1273
      in: path
      name: employeeId
      required: true
      schema:
        type: string
    post:
      description: |
        Terminates an employee.

        The following fields are mandatory for this request:
            * End Date (`endDate`)
      operationId: TerminateEmployee
      parameters:
      - allowEmptyValue: false
        description: Unique identifier of an account.
        example: 4eb62cb48c9f429c93bc26664c1a5a4d
        in: path
        name: accountId
        required: true
        schema:
          type: string
      - allowEmptyValue: false
        description: Unique identifier of an employee within an account.
        example: b48c9f429c93bc26664c1a5a4d1273
        in: path
        name: employeeId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmployeeTerminationInputDetail'
        description: Termination Details of the employee to be terminated.
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionStatusResponse'
          description: The status response.
        "400":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ProblemResponse'
                type: array
          description: The request was invalid due to incorrect or missing information
            in the body.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemResponse'
          description: The user or client authentication failed.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemResponse'
          description: The user or client is authenticated, but does not have access
            ot the requested resource.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemResponse'
          description: The specified object was not found, or is inaccessible to the
            authenticated user or client
        "500":
          description: |
            An error occured while processing the request.
            If you're reading this spec, chances are you know it's not you, it's us - if it keeps happening, let us know what's happening and we'll sort you.
      security:
      - OAuth2:
        - manage:employees
      summary: Terminates an employee
      tags:
      - Employees
  /accounts/{accountId}/employees/{employeeId}/retirement-savings/{retirementSavingId}:
    delete:
      description: |
        Deletes an employee's retirement saving.
      operationId: DeleteEmployeeRetirementSaving
      parameters:
      - allowEmptyValue: false
        description: Unique identifier of an account.
        example: 4eb62cb48c9f429c93bc26664c1a5a4d
        in: path
        name: accountId
        required: true
        schema:
          type: string
      - allowEmptyValue: false
        description: Unique identifier of an employee within an account.
        example: b48c9f429c93bc26664c1a5a4d1273
        in: path
        name: employeeId
        required: true
        schema:
          type: string
      - allowEmptyValue: false
        description: Unique identifier of a retirement saving for an employee.
        example: b83c9f924c93bc26664c1a5a4d1273
        in: path
        name: retirementSavingId
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Employee Retirement Saving deleted successfully
        "400":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ProblemResponse'
                type: array
          description: The request was invalid due to incorrect or missing information
            in the body.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemResponse'
          description: The user or client authentication failed.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemResponse'
          description: The user or client is authenticated, but does not have access
            ot the requested resource.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemResponse'
          description: The specified object was not found, or is inaccessible to the
            authenticated user or client
        "500":
          description: |
            An error occured while processing the request.
            If you're reading this spec, chances are you know it's not you, it's us - if it keeps happening, let us know what's happening and we'll sort you.
      security:
      - OAuth2:
        - manage:employees:payroll
      summary: Deletes an employee's retirement saving
      tags:
      - Employees
    get:
      description: |
        Retrieves an employee's retirement saving.
      operationId: RetrieveEmployeeRetirementSaving
      parameters:
      - allowEmptyValue: false
        description: Unique identifier of an account.
        example: 4eb62cb48c9f429c93bc26664c1a5a4d
        in: path
        name: accountId
        required: true
        schema:
          type: string
      - allowEmptyValue: false
        description: Unique identifier of an employee within an account.
        example: b48c9f429c93bc26664c1a5a4d1273
        in: path
        name: employeeId
        required: true
        schema:
          type: string
      - allowEmptyValue: false
        description: Unique identifier of a retirement saving for an employee.
        example: b83c9f924c93bc26664c1a5a4d1273
        in: path
        name: retirementSavingId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeeRetirementSavingDetail'
          description: The request was successful, the response contains the full
            detail of an employee's retirement saving.
        "400":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ProblemResponse'
                type: array
          description: The request was invalid due to incorrect or missing information
            in the body.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemResponse'
          description: The user or client authentication failed.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemResponse'
          description: The user or client is authenticated, but does not have access
            ot the requested resource.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemResponse'
          description: The specified object was not found, or is inaccessible to the
            authenticated user or client
        "500":
          description: |
            An error occured while processing the request.
            If you're reading this spec, chances are you know it's not you, it's us - if it keeps happening, let us know what's happening and we'll sort you.
      security:
      - OAuth2:
        - read:employees:payroll
      summary: Retrieves an employee's retirement saving
      tags:
      - Employees
    parameters:
    - allowEmptyValue: false
      description: Unique identifier of an account.
      example: 4eb62cb48c9f429c93bc26664c1a5a4d
      in: path
      name: accountId
      required: true
      schema:
        type: string
    - allowEmptyValue: false
      description: Unique identifier of an employee within an account.
      example: b48c9f429c93bc26664c1a5a4d1273
      in: path
      name: employeeId
      required: true
      schema:
        type: string
    - allowEmptyValue: false
      description: Unique identifier of a retirement saving for an employee.
      example: b83c9f924c93bc26664c1a5a4d1273
      in: path
      name: retirementSavingId
      required: true
      schema:
        type: string
    put:
      description: |
        Updates an employess retirement saving values.

        The following fields are mandatory for this request:
            * Type (`type`)
            * Name (`name`)
            * Retirement Saving ID (`usi`)
            * Employee Number (`memberNumber`)
      operationId: UpdateEmployeeRetirementSaving
      parameters:
      - allowEmptyValue: false
        description: Unique identifier of an account.
        example: 4eb62cb48c9f429c93bc26664c1a5a4d
        in: path
        name: accountId
        required: true
        schema:
          type: string
      - allowEmptyValue: false
        description: Unique identifier of an employee within an account.
        example: b48c9f429c93bc26664c1a5a4d1273
        in: path
        name: employeeId
        required: true
        schema:
          type: string
      - allowEmptyValue: false
        description: Unique identifier of a retirement saving for an employee.
        example: b83c9f924c93bc26664c1a5a4d1273
        in: path
        name: retirementSavingId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmployeeRetirementSavingDetailInput'
        description: Details of the retirement saving to be created.
        required: true
      responses:
        "204":
          description: Employee RetirementSaving updated successfully
        "400":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ProblemResponse'
                type: array
          description: The request was invalid due to incorrect or missing information
            in the body.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemResponse'
          description: The user or client authentication failed.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemResponse'
          description: The user or client is authenticated, but does not have access
            ot the requested resource.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemResponse'
          description: The specified object was not found, or is inaccessible to the
            authenticated user or client
        "500":
          description: |
            An error occured while processing the request.
            If you're reading this spec, chances are you know it's not you, it's us - if it keeps happening, let us know what's happening and we'll sort you.
      security:
      - OAuth2:
        - manage:employees:payroll
      summary: Updates an employees retirement saving values
      tags:
      - Employees
  /accounts/{accountId}/employment-statuses:
    get:
      description: Returns a list of all employment statuses accessible to an account.
      operationId: ListEmploymentStatuses
      parameters:
      - description: |
          A search string that contains `field:values` together with boolean operators, which can be used to filter the result.

           An asterix (`*`) can also be used as a wildcard for partial matches on words.
           Logical operators (`AND` and `OR`) can be used between terms.
           Terms can be grouped via parenthesis to build complex search queries (see examples below).

           The fields used in the field must be fields returned from the REST API endpoint.

           Some example filters:
           * `firstName:John` which would return employees whose firstName was John.
           * `surname:Smith OR surname:Klein` which would return employees whose surname was either Smith or Klein.
           * `surname:Smi*` which would return employees whose surname is Smith, Smits, Smithe, etc.
           * `type:LegalEntity AND postcode:2000` which would return all branches that are Legal Entities and in postcode 2000.
           * `postcode:2000 OR postcode:3000` which would return all branches in either postcode of 2000 or in postcode 3000.
           * `type:LegalEntity AND (postcode:2000 OR postcode:3000)` which would return all branches that are Legal Entities and in postcode 2000 or 3000.
        example: name:Scottie*
        in: query
        name: filter
        required: false
        schema:
          type: string
      - description: |
          WIP Description

          Specify the field, followed by asc/desc, separated by :
        example: sort=name:asc&sort=type:desc
        explode: true
        in: query
        name: sort
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: |
          WIP Description

          Pagination: Indicates the number of items that would be in the results.
          NB: Pagination would be invalidated if the filter/sort parms change on a subsequent call.
        example: 100
        in: query
        name: first
        required: false
        schema:
          format: int32
          type: integer
      - description: |
          WIP Description

          Pagination: Start Cursor for the requested Page.
          NB: Pagination would be invalidated if the filter/sort parms change on a subsequent call.
        example: 342dfs09ds329320
        in: query
        name: after
        required: false
        schema:
          type: string
      - description: |
          WIP Description

          Pagination: Indicates the number of items that would be in the results
          NB: Pagination would be invalidated if the filter/sort parms change on a subsequent call.
        example: 100
        in: query
        name: last
        required: false
        schema:
          format: int32
          type: integer
      - description: |
          WIP Description

          Pagination: End Cursor for the requested Page.
          NB: Pagination would be invalidated if the filter/sort parms change on a subsequent call.
        example: 531dfs09ds332932
        in: query
        name: before
        required: false
        schema:
          type: string
      - allowEmptyValue: false
        description: Unique identifier of an account.
        example: 4eb62cb48c9f429c93bc26664c1a5a4d
        in: path
        name: accountId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmploymentStatusesPage'
          description: The request was successful, the response contains an an array
            of employement statuses available to the account, wrapped in pagination
            information.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemResponse'
          description: The user or client authentication failed.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemResponse'
          description: The user or client is authenticated, but does not have access
            ot the requested resource.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemResponse'
          description: The specified object was not found, or is inaccessible to the
            authenticated user or client
        "500":
          description: |
            An error occured while processing the request.
            If you're reading this spec, chances are you know it's not you, it's us - if it keeps happening, let us know what's happening and we'll sort you.
      security:
      - OAuth2:
        - read:accounts:referencedata
      summary: Lists employee statuses
      tags:
      - Reference Data
    parameters:
    - allowEmptyValue: false
      description: Unique identifier of an account.
      example: 4eb62cb48c9f429c93bc26664c1a5a4d
      in: path
      name: accountId
      required: true
      schema:
        type: string
  /accounts/{accountId}/employment-types:
    get:
      description: Returns a list of all employment types accesible to an account.
      operationId: ListEmploymentTypes
      parameters:
      - description: |
          A search string that contains `field:values` together with boolean operators, which can be used to filter the result.

           An asterix (`*`) can also be used as a wildcard for partial matches on words.
           Logical operators (`AND` and `OR`) can be used between terms.
           Terms can be grouped via parenthesis to build complex search queries (see examples below).

           The fields used in the field must be fields returned from the REST API endpoint.

           Some example filters:
           * `firstName:John` which would return employees whose firstName was John.
           * `surname:Smith OR surname:Klein` which would return employees whose surname was either Smith or Klein.
           * `surname:Smi*` which would return employees whose surname is Smith, Smits, Smithe, etc.
           * `type:LegalEntity AND postcode:2000` which would return all branches that are Legal Entities and in postcode 2000.
           * `postcode:2000 OR postcode:3000` which would return all branches in either postcode of 2000 or in postcode 3000.
           * `type:LegalEntity AND (postcode:2000 OR postcode:3000)` which would return all branches that are Legal Entities and in postcode 2000 or 3000.
        example: name:Scottie*
        in: query
        name: filter
        required: false
        schema:
          type: string
      - description: |
          WIP Description

          Specify the field, followed by asc/desc, separated by :
        example: sort=name:asc&sort=type:desc
        explode: true
        in: query
        name: sort
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: |
          WIP Description

          Pagination: Indicates the number of items that would be in the results.
          NB: Pagination would be invalidated if the filter/sort parms change on a subsequent call.
        example: 100
        in: query
        name: first
        required: false
        schema:
          format: int32
          type: integer
      - description: |
          WIP Description

          Pagination: Start Cursor for the requested Page.
          NB: Pagination would be invalidated if the filter/sort parms change on a subsequent call.
        example: 342dfs09ds329320
        in: query
        name: after
        required: false
        schema:
          type: string
      - description: |
          WIP Description

          Pagination: Indicates the number of items that would be in the results
          NB: Pagination would be invalidated if the filter/sort parms change on a subsequent call.
        example: 100
        in: query
        name: last
        required: false
        schema:
          format: int32
          type: integer
      - description: |
          WIP Description

          Pagination: End Cursor for the requested Page.
          NB: Pagination would be invalidated if the filter/sort parms change on a subsequent call.
        example: 531dfs09ds332932
        in: query
        name: before
        required: false
        schema:
          type: string
      - allowEmptyValue: false
        description: Unique identifier of an account.
        example: 4eb62cb48c9f429c93bc26664c1a5a4d
        in: path
        name: accountId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmploymentTypesPage'
          description: The request was successful, the response contains an an array
            of employement types available to the account, wrapped in pagination information.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemResponse'
          description: The user or client authentication failed.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemResponse'
          description: The user or client is authenticated, but does not have access
            ot the requested resource.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemResponse'
          description: The specified object was not found, or is inaccessible to the
            authenticated user or client
        "500":
          description: |
            An error occured while processing the request.
            If you're reading this spec, chances are you know it's not you, it's us - if it keeps happening, let us know what's happening and we'll sort you.
      security:
      - OAuth2:
        - read:accounts:referencedata
      summary: Lists employment types
      tags:
      - Reference Data
    parameters:
    - allowEmptyValue: false
      description: Unique identifier of an account.
      example: 4eb62cb48c9f429c93bc26664c1a5a4d
      in: path
      name: accountId
      required: true
      schema:
        type: string
  /accounts/{accountId}/genders:
    get:
      description: Returns a list of all genders accessible to an account.
      operationId: ListGenders
      parameters:
      - description: |
          A search string that contains `field:values` together with boolean operators, which can be used to filter the result.

           An asterix (`*`) can also be used as a wildcard for partial matches on words.
           Logical operators (`AND` and `OR`) can be used between terms.
           Terms can be grouped via parenthesis to build complex search queries (see examples below).

           The fields used in the field must be fields returned from the REST API endpoint.

           Some example filters:
           * `firstName:John` which would return employees whose firstName was John.
           * `surname:Smith OR surname:Klein` which would return employees whose surname was either Smith or Klein.
           * `surname:Smi*` which would return employees whose surname is Smith, Smits, Smithe, etc.
           * `type:LegalEntity AND postcode:2000` which would return all branches that are Legal Entities and in postcode 2000.
           * `postcode:2000 OR postcode:3000` which would return all branches in either postcode of 2000 or in postcode 3000.
           * `type:LegalEntity AND (postcode:2000 OR postcode:3000)` which would return all branches that are Legal Entities and in postcode 2000 or 3000.
        example: name:Scottie*
        in: query
        name: filter
        required: false
        schema:
          type: string
      - description: |
          WIP Description

          Specify the field, followed by asc/desc, separated by :
        example: sort=name:asc&sort=type:desc
        explode: true
        in: query
        name: sort
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: |
          WIP Description

          Pagination: Indicates the number of items that would be in the results.
          NB: Pagination would be invalidated if the filter/sort parms change on a subsequent call.
        example: 100
        in: query
        name: first
        required: false
        schema:
          format: int32
          type: integer
      - description: |
          WIP Description

          Pagination: Start Cursor for the requested Page.
          NB: Pagination would be invalidated if the filter/sort parms change on a subsequent call.
        example: 342dfs09ds329320
        in: query
        name: after
        required: false
        schema:
          type: string
      - description: |
          WIP Description

          Pagination: Indicates the number of items that would be in the results
          NB: Pagination would be invalidated if the filter/sort parms change on a subsequent call.
        example: 100
        in: query
        name: last
        required: false
        schema:
          format: int32
          type: integer
      - description: |
          WIP Description

          Pagination: End Cursor for the requested Page.
          NB: Pagination would be invalidated if the filter/sort parms change on a subsequent call.
        example: 531dfs09ds332932
        in: query
        name: before
        required: false
        schema:
          type: string
      - allowEmptyValue: false
        description: Unique identifier of an account.
        example: 4eb62cb48c9f429c93bc26664c1a5a4d
        in: path
        name: accountId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GendersPage'
          description: The request was successful, the response contains an an array
            of genders available to the account, wrapped in pagination information.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemResponse'
          description: The user or client authentication failed.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemResponse'
          description: The user or client is authenticated, but does not have access
            ot the requested resource.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemResponse'
          description: The specified object was not found, or is inaccessible to the
            authenticated user or client
        "500":
          description: |
            An error occured while processing the request.
            If you're reading this spec, chances are you know it's not you, it's us - if it keeps happening, let us know what's happening and we'll sort you.
      security:
      - OAuth2:
        - read:accounts:referencedata
      summary: Lists genders
      tags:
      - Reference Data
    parameters:
    - allowEmptyValue: false
      description: Unique identifier of an account.
      example: 4eb62cb48c9f429c93bc26664c1a5a4d
      in: path
      name: accountId
      required: true
      schema:
        type: string
  /accounts/{accountId}/honorifics:
    get:
      description: Returns a list of all honorifics accessible to an account.
      operationId: ListHonorifics
      parameters:
      - description: |
          A search string that contains `field:values` together with boolean operators, which can be used to filter the result.

           An asterix (`*`) can also be used as a wildcard for partial matches on words.
           Logical operators (`AND` and `OR`) can be used between terms.
           Terms can be grouped via parenthesis to build complex search queries (see examples below).

           The fields used in the field must be fields returned from the REST API endpoint.

           Some example filters:
           * `firstName:John` which would return employees whose firstName was John.
           * `surname:Smith OR surname:Klein` which would return employees whose surname was either Smith or Klein.
           * `surname:Smi*` which would return employees whose surname is Smith, Smits, Smithe, etc.
           * `type:LegalEntity AND postcode:2000` which would return all branches that are Legal Entities and in postcode 2000.
           * `postcode:2000 OR postcode:3000` which would return all branches in either postcode of 2000 or in postcode 3000.
           * `type:LegalEntity AND (postcode:2000 OR postcode:3000)` which would return all branches that are Legal Entities and in postcode 2000 or 3000.
        example: name:Scottie*
        in: query
        name: filter
        required: false
        schema:
          type: string
      - description: |
          WIP Description

          Specify the field, followed by asc/desc, separated by :
        example: sort=name:asc&sort=type:desc
        explode: true
        in: query
        name: sort
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: |
          WIP Description

          Pagination: Indicates the number of items that would be in the results.
          NB: Pagination would be invalidated if the filter/sort parms change on a subsequent call.
        example: 100
        in: query
        name: first
        required: false
        schema:
          format: int32
          type: integer
      - description: |
          WIP Description

          Pagination: Start Cursor for the requested Page.
          NB: Pagination would be invalidated if the filter/sort parms change on a subsequent call.
        example: 342dfs09ds329320
        in: query
        name: after
        required: false
        schema:
          type: string
      - description: |
          WIP Description

          Pagination: Indicates the number of items that would be in the results
          NB: Pagination would be invalidated if the filter/sort parms change on a subsequent call.
        example: 100
        in: query
        name: last
        required: false
        schema:
          format: int32
          type: integer
      - description: |
          WIP Description

          Pagination: End Cursor for the requested Page.
          NB: Pagination would be invalidated if the filter/sort parms change on a subsequent call.
        example: 531dfs09ds332932
        in: query
        name: before
        required: false
        schema:
          type: string
      - allowEmptyValue: false
        description: Unique identifier of an account.
        example: 4eb62cb48c9f429c93bc26664c1a5a4d
        in: path
        name: accountId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HonorificsPage'
          description: The request was successful, the response contains an an array
            of honorifics available to the account, wrapped in pagination information.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemResponse'
          description: The user or client authentication failed.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemResponse'
          description: The user or client is authenticated, but does not have access
            ot the requested resource.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemResponse'
          description: The specified object was not found, or is inaccessible to the
            authenticated user or client
        "500":
          description: |
            An error occured while processing the request.
            If you're reading this spec, chances are you know it's not you, it's us - if it keeps happening, let us know what's happening and we'll sort you.
      security:
      - OAuth2:
        - read:accounts:referencedata
      summary: Lists honorifics
      tags:
      - Reference Data
    parameters:
    - allowEmptyValue: false
      description: Unique identifier of an account.
      example: 4eb62cb48c9f429c93bc26664c1a5a4d
      in: path
      name: accountId
      required: true
      schema:
        type: string
  /accounts/{accountId}/employees/{employeeId}/retirement-savings:
    get:
      description: |
        Lists the retirement savings an employee.
      operationId: ListEmployeeRetirementSavings
      parameters:
      - description: |
          A search string that contains `field:values` together with boolean operators, which can be used to filter the result.

           An asterix (`*`) can also be used as a wildcard for partial matches on words.
           Logical operators (`AND` and `OR`) can be used between terms.
           Terms can be grouped via parenthesis to build complex search queries (see examples below).

           The fields used in the field must be fields returned from the REST API endpoint.

           Some example filters:
           * `firstName:John` which would return employees whose firstName was John.
           * `surname:Smith OR surname:Klein` which would return employees whose surname was either Smith or Klein.
           * `surname:Smi*` which would return employees whose surname is Smith, Smits, Smithe, etc.
           * `type:LegalEntity AND postcode:2000` which would return all branches that are Legal Entities and in postcode 2000.
           * `postcode:2000 OR postcode:3000` which would return all branches in either postcode of 2000 or in postcode 3000.
           * `type:LegalEntity AND (postcode:2000 OR postcode:3000)` which would return all branches that are Legal Entities and in postcode 2000 or 3000.
        example: name:Scottie*
        in: query
        name: filter
        required: false
        schema:
          type: string
      - description: |
          WIP Description

          Specify the field, followed by asc/desc, separated by :
        example: sort=name:asc&sort=type:desc
        explode: true
        in: query
        name: sort
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: |
          WIP Description

          Pagination: Indicates the number of items that would be in the results.
          NB: Pagination would be invalidated if the filter/sort parms change on a subsequent call.
        example: 100
        in: query
        name: first
        required: false
        schema:
          format: int32
          type: integer
      - description: |
          WIP Description

          Pagination: Start Cursor for the requested Page.
          NB: Pagination would be invalidated if the filter/sort parms change on a subsequent call.
        example: 342dfs09ds329320
        in: query
        name: after
        required: false
        schema:
          type: string
      - description: |
          WIP Description

          Pagination: Indicates the number of items that would be in the results
          NB: Pagination would be invalidated if the filter/sort parms change on a subsequent call.
        example: 100
        in: query
        name: last
        required: false
        schema:
          format: int32
          type: integer
      - description: |
          WIP Description

          Pagination: End Cursor for the requested Page.
          NB: Pagination would be invalidated if the filter/sort parms change on a subsequent call.
        example: 531dfs09ds332932
        in: query
        name: before
        required: false
        schema:
          type: string
      - allowEmptyValue: false
        description: Unique identifier of an account.
        example: 4eb62cb48c9f429c93bc26664c1a5a4d
        in: path
        name: accountId
        required: true
        schema:
          type: string
      - allowEmptyValue: false
        description: Unique identifier of an employee within an account.
        example: b48c9f429c93bc26664c1a5a4d1273
        in: path
        name: employeeId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeeRetirementSavingPage'
          description: The request was successful, the response contains an array
            of retirement saving (in summary form) for the employee, wrapped in pagination
            information.
        "400":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ProblemResponse'
                type: array
          description: The request was invalid due to incorrect or missing information
            in the body.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemResponse'
          description: The user or client authentication failed.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemResponse'
          description: The user or client is authenticated, but does not have access
            ot the requested resource.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemResponse'
          description: The specified object was not found, or is inaccessible to the
            authenticated user or client
        "500":
          description: |
            An error occured while processing the request.
            If you're reading this spec, chances are you know it's not you, it's us - if it keeps happening, let us know what's happening and we'll sort you.
      security:
      - OAuth2:
        - manage:employees:payroll
      summary: Lists retirement savings of an employee
      tags:
      - Employees
    parameters:
    - allowEmptyValue: false
      description: Unique identifier of an account.
      example: 4eb62cb48c9f429c93bc26664c1a5a4d
      in: path
      name: accountId
      required: true
      schema:
        type: string
    - allowEmptyValue: false
      description: Unique identifier of an employee within an account.
      example: b48c9f429c93bc26664c1a5a4d1273
      in: path
      name: employeeId
      required: true
      schema:
        type: string
    post:
      description: |
        Creates a new RetirementSaving and adds it to the employee
      operationId: AddEmployeeRetirementSaving
      parameters:
      - allowEmptyValue: false
        description: Unique identifier of an account.
        example: 4eb62cb48c9f429c93bc26664c1a5a4d
        in: path
        name: accountId
        required: true
        schema:
          type: string
      - allowEmptyValue: false
        description: Unique identifier of an employee within an account.
        example: b48c9f429c93bc26664c1a5a4d1273
        in: path
        name: employeeId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmployeeRetirementSavingDetailInput'
        description: Details of the RetirementSaving to be added.
        required: true
      responses:
        "201":
          description: Employee RetirementSaving Created Successfully
          headers:
            Location:
              description: The location header will provide the canonical reference
                to the created retirement saving
              example: https://rest.enablehr.com/accounts/4eb62cb48c9f429c93bc26664c1a5a4d/employees/2dccadd0b8504cf98aeb0321e3bcf88e/retirement-savings/b83c9f924c93bc26664c1a5a4d1273
              schema:
                type: string
        "400":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ProblemResponse'
                type: array
          description: The request was invalid due to incorrect or missing information
            in the body.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemResponse'
          description: The user or client authentication failed.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemResponse'
          description: The user or client is authenticated, but does not have access
            ot the requested resource.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemResponse'
          description: The specified object was not found, or is inaccessible to the
            authenticated user or client
        "500":
          description: |
            An error occured while processing the request.
            If you're reading this spec, chances are you know it's not you, it's us - if it keeps happening, let us know what's happening and we'll sort you.
      security:
      - OAuth2:
        - manage:employees:payroll
      summary: Creates and Adds a RetirementSaving to this employee
      tags:
      - Employees
  /accounts/{accountId}/employees/{employeeId}/tax-details:
    get:
      description: |
        Retrieves an employees tax details
      operationId: RetrieveEmployeeTaxDetails
      parameters:
      - allowEmptyValue: false
        description: Unique identifier of an account.
        example: 4eb62cb48c9f429c93bc26664c1a5a4d
        in: path
        name: accountId
        required: true
        schema:
          type: string
      - allowEmptyValue: false
        description: Unique identifier of an employee within an account.
        example: b48c9f429c93bc26664c1a5a4d1273
        in: path
        name: employeeId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeeTaxDetails'
          description: The request was successful, the response contains the full
            tax details of an individual employee.
        "400":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ProblemResponse'
                type: array
          description: The request was invalid due to incorrect or missing information
            in the body.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemResponse'
          description: The user or client authentication failed.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemResponse'
          description: The user or client is authenticated, but does not have access
            ot the requested resource.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemResponse'
          description: The specified object was not found, or is inaccessible to the
            authenticated user or client
        "500":
          description: |
            An error occured while processing the request.
            If you're reading this spec, chances are you know it's not you, it's us - if it keeps happening, let us know what's happening and we'll sort you.
      security:
      - OAuth2:
        - read:employees:payroll
      summary: Retrieves an employees tax detail
      tags:
      - Employees
    parameters:
    - allowEmptyValue: false
      description: Unique identifier of an account.
      example: 4eb62cb48c9f429c93bc26664c1a5a4d
      in: path
      name: accountId
      required: true
      schema:
        type: string
    - allowEmptyValue: false
      description: Unique identifier of an employee within an account.
      example: b48c9f429c93bc26664c1a5a4d1273
      in: path
      name: employeeId
      required: true
      schema:
        type: string
    put:
      description: |
        Creates/Updates tax details for an employee.

        The Tax File Number (`tfn`) is mandatory if Exempt Type (`exemptType`) is blank

        The Exempt Type (`exemptType`) is mandatory if Tax File Number (`tfn`) is blank

        Offset Estimated Amount (`offsetEstimatedAmount`) is mandatory only if
        Other Tax Offset Claimed (`otherTaxOffsetClaimed`)
         is checked.  Value must be 0 or greater

        Increased Tax Withholding Amount(`increasedTaxWithholdingAmount`) is mandatory only if
        Upward Variation Requested (`upwardVariationRequested`) is checked.  Value must be 0 or greater

        Approved Withholding Variation Percentage (`approvedWithholdingVariationPercentage`) is mandatory only if
        Approved Withholding Variation Percentage (`hasApprovedWithholdingVariation`) is checked.  Value must be
        between 0 and 100
      operationId: MaintainEmployeeTaxDetails
      parameters:
      - allowEmptyValue: false
        description: Unique identifier of an account.
        example: 4eb62cb48c9f429c93bc26664c1a5a4d
        in: path
        name: accountId
        required: true
        schema:
          type: string
      - allowEmptyValue: false
        description: Unique identifier of an employee within an account.
        example: b48c9f429c93bc26664c1a5a4d1273
        in: path
        name: employeeId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmployeeTaxDetailsInput'
        description: Details of the tax details for the employee to be created/updated.
        required: true
      responses:
        "204":
          description: Employee tax details created/updated successfully
        "400":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ProblemResponse'
                type: array
          description: The request was invalid due to incorrect or missing information
            in the body.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemResponse'
          description: The user or client authentication failed.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemResponse'
          description: The user or client is authenticated, but does not have access
            ot the requested resource.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemResponse'
          description: The specified object was not found, or is inaccessible to the
            authenticated user or client
        "500":
          description: |
            An error occured while processing the request.
            If you're reading this spec, chances are you know it's not you, it's us - if it keeps happening, let us know what's happening and we'll sort you.
      security:
      - OAuth2:
        - manage:employees:payroll
      summary: Creates/Updates tax details for an employee
      tags:
      - Employees
components:
  schemas:
    ProblemResponse:
      description: |
        This object will be returned whenever there is an error/problem with the request.
        It contains all the details needed to handle the error in your code.
      example:
        type: http://rest.enablehr.com/problem/not-found
        title: Not Found
        detail: The thing you were looking for was not found
        status: 404
        instance: http://rest.enablehr.com/thing/0
        extensions:
          key: value
      properties:
        type:
          type: string
        title:
          nullable: false
          type: string
        detail:
          nullable: false
          type: string
        status:
          nullable: false
          type: integer
        instance:
          type: string
        extensions:
          type: object
      required:
      - status
      - title
      type: object
    ActionStatusDetail:
      description: |
        This object will be returned whenever there is an error/problem with the request.
        It contains all the details needed to handle the error in your code.
      example:
        dateUpdatedUTC: 1997-07-16T19:20:30.45+01:00
        actionStatus: Pending
        referenceType: Employee
        id: 4eb62cb48c9f429c93bc26664c1a5a4d
        type: Terminate_Employee
        dateCreatedUTC: 1997-07-16T19:20:30.45+01:00
        referenceId: 90865b96960643738e7e0441c11e6791
      properties:
        id:
          description: The identifier for the ActionStatusDetail
          example: 4eb62cb48c9f429c93bc26664c1a5a4d
          type: string
        actionStatus:
          $ref: '#/components/schemas/ActionStatuses'
        referenceId:
          description: The id of the item this action is being performed on
          example: 90865b96960643738e7e0441c11e6791
          type: string
        referenceType:
          $ref: '#/components/schemas/ActionReferenceTypes'
        type:
          $ref: '#/components/schemas/ActionTypes'
        dateCreatedUTC:
          description: UTC time of when this action was created (format is YYYY-MM-DD
            HH:MM:SS)
          example: 1997-07-16T19:20:30.45+01:00
          type: string
        dateUpdatedUTC:
          description: UTC time of when this action was updated. (format is YYYY-MM-DD
            HH:MM:SS)
          example: 1997-07-16T19:20:30.45+01:00
          type: string
      required:
      - actionStatus
      - id
      - type
      type: object
    ActionStatuses:
      enum:
      - Pending
      - In_Progress
      - Completed
      - Failed
      example: Pending
      type: string
    ActionReferenceTypes:
      enum:
      - Employee
      - Candidate
      - User
      example: Employee
      type: string
    ActionTypes:
      enum:
      - Terminate_Employee
      - Transfer_Employee_Move_Everything
      - Transfer_Employee_Copy
      - Transfer_Employee_Move_Everything_No_Trace
      example: Terminate_Employee
      type: string
    BranchesPage:
      description: A wrapper for the Branch which includes pagination information
        and an array of Branches
      example:
        data:
        - cursor: asdfgflkj
          retrieveLink: /accounts/87ujhygt5mnbgtsiw7jdhdff60/employees/4eb62cb48c9f429c93bc26664c1a12345
        - cursor: asdfgflkj
          retrieveLink: /accounts/87ujhygt5mnbgtsiw7jdhdff60/employees/4eb62cb48c9f429c93bc26664c1a12345
        pageInfo:
          hasNextPage: true
          hasPreviousPage: true
          endCursor: asdfgflkj
          startCursor: asdfgflkj
      properties:
        pageInfo:
          $ref: '#/components/schemas/PageInfo'
        data:
          description: An array of branches
          items:
            $ref: '#/components/schemas/BranchesPage_data'
          type: array
      type: object
    BranchSummary:
      allOf:
      - $ref: '#/components/schemas/BranchReference'
      - $ref: '#/components/schemas/BranchSummary_allOf'
      description: Summary information for the branch
      type: object
    BranchReference:
      description: Reference information for the branch containing id, name, path
      properties:
        id:
          description: Unique identifier of a branch
          example: 939983e636e6477a82bad130c33dd12a
          type: string
        name:
          description: Name of the branch
          example: Jo's Plumbing North Sydney
          type: string
        path:
          description: |
            This is a representation of the path hierarchy.
            It is a string concatenation the name of the branch with the names of all the parents of a branch till the root.
          example: /Jo's Industries/NSW/Jo's Plumbing North Sydney
          type: string
      type: object
    BranchDetail:
      allOf:
      - $ref: '#/components/schemas/BranchReference'
      - $ref: '#/components/schemas/BranchDetail_allOf'
      description: Detailed information for the branch
      type: object
    EmployeeInputDetail:
      description: Provides details for creating or updating an employee.
      example:
        branchId: 4eb62cb48c9f429c93bc26664c1a5a4d
        positionTitle: Manager
        gender: Male
        employmentType: Casual
        dateOfBirth: 1974-05-21
        title: Mr
        employmentStatus: Transferred
        personalAddress:
          country: Australia
          postcode: "2002"
          suburb: Sydney Town
          state: NSW
          line2: 1234 Pacific Highway
          line1: Suite 3
        employeeNumber: Manager
        commencementDate: 2017-12-25
        firstName: Michael
        postalAddress:
          country: Australia
          postcode: "2002"
          suburb: Sydney Town
          state: NSW
          line2: 1234 Pacific Highway
          line1: Suite 3
        surname: Johnson
        nickname: Mickey
        middleName: K
        preferredName: Mike
        contacts:
          work:
            email: test@test.com
          home:
            phone: 08 4044 0404
            mobile: 0404 404 040
            email: test@test.com
      properties:
        branchId:
          description: Branch ID of the employee
          example: 4eb62cb48c9f429c93bc26664c1a5a4d
          maxLength: 64
          minLength: 1
          type: string
        title:
          example: Mr
          maxLength: 128
          type: string
        firstName:
          description: First name of the employee
          example: Michael
          maxLength: 128
          minLength: 1
          type: string
        middleName:
          description: Middle name of the employee
          example: K
          maxLength: 255
          type: string
        surname:
          description: Surname or last name of the employee
          example: Johnson
          maxLength: 128
          minLength: 1
          type: string
        preferredName:
          description: Preferred name of the employee
          example: Mike
          maxLength: 255
          type: string
        nickname:
          description: Nick name of the employee
          example: Mickey
          maxLength: 128
          type: string
        personalAddress:
          $ref: '#/components/schemas/AddressDetail'
        postalAddress:
          $ref: '#/components/schemas/AddressDetail'
        contacts:
          $ref: '#/components/schemas/EmployeeContactDetail'
        gender:
          $ref: '#/components/schemas/Genders'
        dateOfBirth:
          description: Birthdate of the employees (accepted format is YYYY-MM-DD)
          example: 1974-05-21
          maxLength: 10
          minLength: 10
          pattern: ^(19\d{2}|20([0-4]\d|50))-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$
          type: string
        positionTitle:
          description: The title of the position associated to the employee (Manager,
            CTO, CEO)
          example: Manager
          maxLength: 255
          type: string
        employeeNumber:
          description: Unique number assigned by the company to identify employee
            within an account.
          example: Manager
          maxLength: 64
          type: string
        employmentType:
          $ref: '#/components/schemas/EmploymentTypes'
        employmentStatus:
          $ref: '#/components/schemas/EmploymentStatuses'
        commencementDate:
          description: Start date of the employment (accepted format is YYYY-MM-DD)
          example: 2017-12-25
          maxLength: 10
          minLength: 10
          pattern: ^(19\d{2}|20([0-4]\d|50))-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$
          type: string
      required:
      - branchId
      - firstName
      - surname
      type: object
    EmployeeContactDetail:
      description: Provides contact details relating to an employee.
      example:
        work:
          email: test@test.com
        home:
          phone: 08 4044 0404
          mobile: 0404 404 040
          email: test@test.com
      properties:
        home:
          $ref: '#/components/schemas/HomeContactDetail'
        work:
          $ref: '#/components/schemas/WorkContactDetail'
      type: object
    HomeContactDetail:
      description: Summary information for the home contact
      example:
        phone: 08 4044 0404
        mobile: 0404 404 040
        email: test@test.com
      properties:
        phone:
          description: Land line number may include the area code
          example: 08 4044 0404
          maxLength: 128
          nullable: true
          type: string
        mobile:
          description: Mobile phone number
          example: 0404 404 040
          maxLength: 128
          nullable: true
          type: string
        email:
          description: Email address for the contact
          example: test@test.com
          maxLength: 128
          nullable: true
          type: string
      type: object
    WorkContactDetail:
      description: Summary information for the work contact
      example:
        email: test@test.com
      properties:
        email:
          description: Email address for the contact
          example: test@test.com
          maxLength: 128
          nullable: true
          type: string
      type: object
    EmployeesPage:
      description: A wrapper for the Employee which includes pagination information
        and an array of Employees
      example:
        data:
        - cursor: asdfgflkj
          retrieveLink: /accounts/87ujhygt5mnbgtsiw7jdhdff60/employees/4eb62cb48c9f429c93bc26664c1a12345
        - cursor: asdfgflkj
          retrieveLink: /accounts/87ujhygt5mnbgtsiw7jdhdff60/employees/4eb62cb48c9f429c93bc26664c1a12345
        pageInfo:
          hasNextPage: true
          hasPreviousPage: true
          endCursor: asdfgflkj
          startCursor: asdfgflkj
      properties:
        pageInfo:
          $ref: '#/components/schemas/PageInfo'
        data:
          description: An array of employees
          items:
            $ref: '#/components/schemas/EmployeesPage_data'
          type: array
      type: object
    EmployeeSummary:
      allOf:
      - $ref: '#/components/schemas/EmployeeReference'
      - $ref: '#/components/schemas/EmployeeSummary_allOf'
      description: Summary information for the employee
      type: object
    EmployeeReference:
      description: Contains common information across all employees
      properties:
        id:
          description: Unique identifier of an employee
          example: 4eb62cb48c9f429c93bc26664c1a5a4d
          type: string
        employeeNumber:
          description: Unique number assigned by the company to identify employee
            within an account
          example: Transferred
          type: string
      type: object
    EmployeeBankAccountsInput:
      description: An object with employees bank details
      example:
        au:
        - bsb: 012-123
          amountInCents: 1234500
          number: "098765432"
          statementText: Salary Transfer
          name: Savings
          accountOrder: 1
          id: 4eb62cb48c9f429c93bc26664c1a5a4d
          remainder: true
        - bsb: 012-123
          amountInCents: 1234500
          number: "098765432"
          statementText: Salary Transfer
          name: Savings
          accountOrder: 1
          id: 4eb62cb48c9f429c93bc26664c1a5a4d
          remainder: true
        - bsb: 012-123
          amountInCents: 1234500
          number: "098765432"
          statementText: Salary Transfer
          name: Savings
          accountOrder: 1
          id: 4eb62cb48c9f429c93bc26664c1a5a4d
          remainder: true
        - bsb: 012-123
          amountInCents: 1234500
          number: "098765432"
          statementText: Salary Transfer
          name: Savings
          accountOrder: 1
          id: 4eb62cb48c9f429c93bc26664c1a5a4d
          remainder: true
      properties:
        au:
          items:
            $ref: '#/components/schemas/EmployeeBankAccountInputAU'
          maxItems: 4
          minItems: 1
          type: array
      type: object
    EmployeeBankAccountInputAUList:
      items:
        $ref: '#/components/schemas/EmployeeBankAccountInputAU'
      maxItems: 4
      minItems: 1
      type: array
    EmployeeBankAccountInputAU:
      description: Provides details for creating or updating an employee.
      example:
        bsb: 012-123
        amountInCents: 1234500
        number: "098765432"
        statementText: Salary Transfer
        name: Savings
        accountOrder: 1
        id: 4eb62cb48c9f429c93bc26664c1a5a4d
        remainder: true
      properties:
        id:
          description: ID of the employee bank details
          example: 4eb62cb48c9f429c93bc26664c1a5a4d
          type: string
        bsb:
          description: BSB
          example: 012-123
          maxLength: 64
          minLength: 1
          type: string
        number:
          description: Bank Account Number
          example: "098765432"
          maxLength: 64
          minLength: 1
          type: string
        name:
          description: Account Name
          example: Savings
          maxLength: 64
          minLength: 1
          type: string
        amountInCents:
          description: Amount in Cents
          example: 1234500
          type: integer
        statementText:
          description: Statement Text
          example: Salary Transfer
          maxLength: 64
          minLength: 0
          type: string
        remainder:
          description: Remainder
          example: true
          type: boolean
        accountOrder:
          description: Account Order
          example: 1
          maximum: 3
          minimum: 0
          type: integer
      required:
      - accountOrder
      - bsb
      - name
      - number
      - remainder
      type: object
    EmployeeBankAccounts:
      description: An object with employees bank details
      example:
        au:
        - bsb: 012-123
          amountInCents: 1234500
          number: "136543"
          dateUpdatedUTC: 1997-07-16T19:20:30.45+01:00
          statementText: Salary Transfer
          name: Michael Hardware Supplies
          accountOrder: 1
          id: 19876543adfg
          remainder: true
          dateCreatedUTC: 1997-07-16T19:20:30.45+01:00
        - bsb: 012-123
          amountInCents: 1234500
          number: "136543"
          dateUpdatedUTC: 1997-07-16T19:20:30.45+01:00
          statementText: Salary Transfer
          name: Michael Hardware Supplies
          accountOrder: 1
          id: 19876543adfg
          remainder: true
          dateCreatedUTC: 1997-07-16T19:20:30.45+01:00
      properties:
        au:
          items:
            $ref: '#/components/schemas/EmployeeBankAccountAU'
          type: array
      type: object
    EmployeeBankAccountAUList:
      items:
        $ref: '#/components/schemas/EmployeeBankAccountAU'
      type: array
    EmployeeBankAccountAU:
      description: Provides details of the bank account.
      example:
        bsb: 012-123
        amountInCents: 1234500
        number: "136543"
        dateUpdatedUTC: 1997-07-16T19:20:30.45+01:00
        statementText: Salary Transfer
        name: Michael Hardware Supplies
        accountOrder: 1
        id: 19876543adfg
        remainder: true
        dateCreatedUTC: 1997-07-16T19:20:30.45+01:00
      properties:
        id:
          description: ID of the bank detail
          example: 19876543adfg
          maxLength: 64
          minLength: 1
          type: string
        bsb:
          description: BSB Number
          example: 012-123
          maxLength: 16
          minLength: 1
          type: string
        number:
          description: Bank Account Number
          example: "136543"
          maxLength: 64
          minLength: 1
          type: string
        name:
          description: Account name
          example: Michael Hardware Supplies
          maxLength: 64
          minLength: 1
          type: string
        amountInCents:
          description: Amount in Cents
          example: 1234500
          type: integer
        statementText:
          description: Statement Text
          example: Salary Transfer
          maxLength: 64
          minLength: 0
          nullable: true
          type: string
        remainder:
          description: Remainder
          example: true
          type: boolean
        accountOrder:
          description: Account Order
          example: 1
          maximum: 3
          minimum: 0
          type: integer
        dateCreatedUTC:
          description: UTC time of when the bank detail was created. (format is YYYY-MM-DD
            HH:MM:SS)
          example: 1997-07-16T19:20:30.45+01:00
          minLength: 1
          nullable: false
          type: string
        dateUpdatedUTC:
          description: UTC time of when the bank detail was updated. (format is YYYY-MM-DD
            HH:MM:SS)
          example: 1997-07-16T19:20:30.45+01:00
          minLength: 1
          nullable: false
          type: string
      type: object
    EmployeeLeaveBalancesInput:
      description: An object to input employees leave balances
      example:
        au:
          longServiceLeave: 4.67
          annualLeave: 2.45
          personalLeave: 3.56
      properties:
        au:
          $ref: '#/components/schemas/EmployeeLeaveBalanceInputAU'
      type: object
    EmployeeLeaveBalanceInputAU:
      description: Provides details for creating or updating an employees leave balances.
      example:
        longServiceLeave: 4.67
        annualLeave: 2.45
        personalLeave: 3.56
      properties:
        annualLeave:
          description: Annual Leave in hours
          example: 2.45
          type: number
        personalLeave:
          description: Personal Leave in hours
          example: 3.56
          type: number
        longServiceLeave:
          description: Long Service Leave in hours
          example: 4.67
          type: number
      required:
      - annualLeave
      - longServiceLeave
      - personalLeave
      type: object
    EmployeeLeaveBalanceDetail:
      description: Detailed information for the employee leave balances
      example:
        au:
          longServiceLeave: 21.4
          dateUpdatedUTC: 1997-07-16T19:20:30.45+01:00
          annualLeave: 2.5
          personalLeave: 1.35
          dateCreatedUTC: 1997-07-16T19:20:30.45+01:00
      properties:
        au:
          $ref: '#/components/schemas/EmployeeLeaveBalanceDetailAU'
      type: object
    EmployeeLeaveBalanceDetailAU:
      description: Detailed information for the employee leave balances
      example:
        longServiceLeave: 21.4
        dateUpdatedUTC: 1997-07-16T19:20:30.45+01:00
        annualLeave: 2.5
        personalLeave: 1.35
        dateCreatedUTC: 1997-07-16T19:20:30.45+01:00
      properties:
        annualLeave:
          description: Leave Balance Type
          example: 2.5
          type: number
        personalLeave:
          description: Leave Balance Type
          example: 1.35
          type: number
        longServiceLeave:
          description: Leave Balance Type
          example: 21.4
          type: number
        dateCreatedUTC:
          description: UTC time of when the leave balance was created. (format is
            YYYY-MM-DD HH:MM:SS)
          example: 1997-07-16T19:20:30.45+01:00
          type: string
        dateUpdatedUTC:
          description: UTC time of when the leave balance was updated. (format is
            YYYY-MM-DD HH:MM:SS)
          example: 1997-07-16T19:20:30.45+01:00
          type: string
      type: object
    EmployeeDetail:
      allOf:
      - $ref: '#/components/schemas/EmployeeReference'
      - $ref: '#/components/schemas/EmployeeDetail_allOf'
      description: Detailed information for the employee
      type: object
    EmployeeTransferInputDetail:
      description: Provides details for creating or updating an employee.
      example:
        toBranchId: 4eb62cb48c9f429c93bc26664c1a5a4d
        effectiveDate: 2017-12-25
      properties:
        effectiveDate:
          description: Transfer date of the employee (accepted format is YYYY-MM-DD)
          example: 2017-12-25
          maxLength: 10
          minLength: 10
          pattern: ^\d{4}-\d{2}-\d{2}$
          type: string
        toBranchId:
          description: Destination Branch Id
          example: 4eb62cb48c9f429c93bc26664c1a5a4d
          maxLength: 64
          minLength: 1
          type: string
        transferType:
          $ref: '#/components/schemas/TransferTypes'
      required:
      - toBranchId
      - transferType
      type: object
    TransferTypes:
      enum:
      - Move_Everything
      - Create_Copy
      - Move_Everything_No_Trace
      type: string
    ActionStatusResponse:
      description: |
        This object will be returned whenever there is an action status that goes with the request.
        It contains all the details needed to retrieve the status in your code.
      example:
        actionStatusURL: http://api.enablehr.com/accounts/{acctId}/action-status/{actionStatusId}
      properties:
        actionStatusURL:
          maxLength: 512
          minLength: 1
          type: string
      required:
      - actionStatusURL
      type: object
    EmployeeTerminationInputDetail:
      description: Provides additional details for Termination of an Employee.
      example:
        endDate: 2020-08-01
        terminatedBy: terminatedBy
        terminationComments: terminationComments
      properties:
        endDate:
          description: Termination date of the employee (accepted format is YYYY-MM-DD)
          example: 2020-08-01
          maxLength: 10
          minLength: 10
          pattern: ^(19\d{2}|20([0-4]\d|50))-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$
          type: string
        terminatedBy:
          description: The person responsible for the termination
          maxLength: 256
          type: string
        terminationMethod:
          $ref: '#/components/schemas/TerminationMethods'
        terminationComments:
          description: Additional Comments relating to the termination
          type: string
      required:
      - endDate
      type: object
    TerminationMethods:
      enum:
      - By_Consent
      - By_Notice
      - Summarily
      - By_Other_Means
      type: string
    EmployeeRetirementSavingDetailInput:
      description: Detailed information for the employee's retirement saving
      example:
        au:
          memberNumber: abc098ijn176
          name: Johnson
          usi: STA0100AU
          type: REGULATED
          abn: 65 714 394 898
      properties:
        au:
          $ref: '#/components/schemas/EmployeeSuperFundDetailInput'
      type: object
    EmployeeSuperFundDetailInput:
      description: Summary information for the employee's retirement saving
      example:
        memberNumber: abc098ijn176
        name: Johnson
        usi: STA0100AU
        type: REGULATED
        abn: 65 714 394 898
      properties:
        memberNumber:
          description: Unique number assigned by the company to identify employee
            within an account
          example: abc098ijn176
          minLength: 1
          nullable: false
          type: string
        type:
          $ref: '#/components/schemas/EmployeeSuperFundTypes'
        name:
          description: Name of the retirement saving
          example: Johnson
          maxLength: 255
          minLength: 1
          nullable: false
          type: string
        abn:
          description: ABN of the retirement saving
          example: 65 714 394 898
          maxLength: 20
          minLength: 1
          nullable: false
          type: string
        usi:
          description: Retirement Saving ID (USI)
          example: STA0100AU
          maxLength: 64
          nullable: true
          type: string
      required:
      - abn
      - memberNumber
      - name
      - type
      type: object
    EmployeeSuperFundTypes:
      description: The type of RetirementSaving.
      enum:
      - REGULATED
      - SMSF
      example: REGULATED
      type: string
    EmployeeRetirementSavingDetail:
      description: Detailed information for the employee's retirement saving
      example:
        au:
          dateUpdatedUTC: 1997-07-16T19:20:30.45+01:00
          esa: ESUPERFUND
          memberNumber: abc098ijn176
          name: Johnson
          usi: STA0100AU
          id: 4eb62cb48c9f429c93bc26664c1a5a4d
          type: REGULATED
          abn: 65 714 394 898
          dateCreatedUTC: 1997-07-16T19:20:30.45+01:00
      properties:
        au:
          $ref: '#/components/schemas/EmployeeSuperFundDetail'
      type: object
    EmployeeSuperFundDetail:
      description: Summary information for the employee's retirement saving
      example:
        dateUpdatedUTC: 1997-07-16T19:20:30.45+01:00
        esa: ESUPERFUND
        memberNumber: abc098ijn176
        name: Johnson
        usi: STA0100AU
        id: 4eb62cb48c9f429c93bc26664c1a5a4d
        type: REGULATED
        abn: 65 714 394 898
        dateCreatedUTC: 1997-07-16T19:20:30.45+01:00
      properties:
        id:
          description: Unique identifier of an employees retirement saving
          example: 4eb62cb48c9f429c93bc26664c1a5a4d
          type: string
        memberNumber:
          description: Unique number assigned by the company to identify employee
            within an account
          example: abc098ijn176
          minLength: 1
          nullable: false
          type: string
        type:
          $ref: '#/components/schemas/EmployeeSuperFundTypes'
        name:
          description: Name of the retirement saving
          example: Johnson
          maxLength: 255
          minLength: 1
          nullable: false
          type: string
        abn:
          description: ABN of the retirement saving
          example: 65 714 394 898
          maxLength: 20
          minLength: 1
          nullable: false
          type: string
        esa:
          description: Electronic Service Address
          example: ESUPERFUND
          maxLength: 64
          nullable: true
          type: string
        usi:
          description: Retirement Saving ID (USI)
          example: STA0100AU
          maxLength: 64
          nullable: true
          type: string
        dateCreatedUTC:
          description: UTC time of when the retirement saving was created. (format
            is YYYY-MM-DD HH:MM:SS)
          example: 1997-07-16T19:20:30.45+01:00
          nullable: false
          type: string
        dateUpdatedUTC:
          description: UTC time of when the retirement saving was updated. (format
            is YYYY-MM-DD HH:MM:SS)
          example: 1997-07-16T19:20:30.45+01:00
          nullable: false
          type: string
      type: object
    EmploymentStatusesPage:
      description: A wrapper for the Employment Status which includes pagination information
        and an array of Employment Statuses
      example:
        data:
        - cursor: asdfgflkj
        - cursor: asdfgflkj
        pageInfo:
          hasNextPage: true
          hasPreviousPage: true
          endCursor: asdfgflkj
          startCursor: asdfgflkj
      properties:
        pageInfo:
          $ref: '#/components/schemas/PageInfo'
        data:
          description: An array of Employment Statuses
          items:
            $ref: '#/components/schemas/EmploymentStatusesPage_data'
          type: array
      type: object
    EmploymentStatusSummary:
      allOf:
      - $ref: '#/components/schemas/EmploymentStatusReference'
      - $ref: '#/components/schemas/EmploymentStatusSummary_allOf'
      description: Summary information for the employment status
      type: object
    EmploymentStatusReference:
      description: Reference information for the Employment Status containing id,
        name
      properties:
        id:
          description: The identifier for the Employment Status
          example: 4eb62cb48c9f429c93bc26664c1a5a4d
          type: string
        name:
          $ref: '#/components/schemas/EmploymentStatuses'
      type: object
    EmploymentStatuses:
      description: A list of all Employment Statuses in an account.
      enum:
      - Current
      - Terminated
      - Completed
      - Suspended
      - Leave
      - LeaveWithoutPay
      - Transferred
      - Terminating
      - Merged
      example: Transferred
      type: string
    EmploymentTypesPage:
      description: A wrapper for the Employment Type which includes pagination information
        and an array of Employment Types
      example:
        data:
        - cursor: asdfgflkj
        - cursor: asdfgflkj
        pageInfo:
          hasNextPage: true
          hasPreviousPage: true
          endCursor: asdfgflkj
          startCursor: asdfgflkj
      properties:
        pageInfo:
          $ref: '#/components/schemas/PageInfo'
        data:
          description: An array of Employment Type Summaries
          items:
            $ref: '#/components/schemas/EmploymentTypesPage_data'
          type: array
      type: object
    EmploymentTypeSummary:
      allOf:
      - $ref: '#/components/schemas/EmploymentTypeReference'
      - $ref: '#/components/schemas/EmploymentTypeSummary_allOf'
      description: Summary information for the employment type
      type: object
    EmploymentTypeReference:
      description: Reference information for the Employment Type containing id, name
      properties:
        id:
          description: The identifier for the Employment Type
          example: 4eb62cb48c9f429c93bc26664c1a5a4d
          type: string
        name:
          $ref: '#/components/schemas/EmploymentTypes'
      type: object
    EmploymentTypes:
      description: A list of all Employment Types in an account.
      enum:
      - Unspecified
      - Permanent_FullTime
      - Permanent_PartTime
      - Temporary
      - Casual
      - Contract
      - FixedTerm_FullTime
      - FixedTerm_PartTime
      - LabourHire
      - SuperIncomeStream
      example: Casual
      type: string
    GendersPage:
      description: A wrapper for the Gender which includes pagination information
        and an array of Genders
      example:
        data:
        - cursor: asdfgflkj
        - cursor: asdfgflkj
        pageInfo:
          hasNextPage: true
          hasPreviousPage: true
          endCursor: asdfgflkj
          startCursor: asdfgflkj
      properties:
        pageInfo:
          $ref: '#/components/schemas/PageInfo'
        data:
          description: An array of Gender summaries
          items:
            $ref: '#/components/schemas/GendersPage_data'
          type: array
    GenderSummary:
      allOf:
      - $ref: '#/components/schemas/GenderReference'
      - $ref: '#/components/schemas/GenderSummary_allOf'
      description: Summary information for the gender
      type: object
    GenderReference:
      description: Reference information for the Gender containing id, key, name
      properties:
        id:
          description: The identifier for the Gender
          example: 4eb62cb48c9f429c93bc26664c1a5a4d
          type: string
        key:
          description: A fixed value used to refer to the Gender.  Will not change
            in the system
          example: Non_Binary
          type: string
        name:
          description: The name for this particular gender.  Can be changed in the
            system.
          example: Non Binary
          type: string
      type: object
    HonorificsPage:
      description: A wrapper for the Honorifics which includes pagination information
        and an array of Honorifics
      example:
        data:
        - cursor: asdfgflkj
        - cursor: asdfgflkj
        pageInfo:
          hasNextPage: true
          hasPreviousPage: true
          endCursor: asdfgflkj
          startCursor: asdfgflkj
      properties:
        pageInfo:
          $ref: '#/components/schemas/PageInfo'
        data:
          description: An array of Honorific summaries
          items:
            $ref: '#/components/schemas/HonorificsPage_data'
          type: array
      type: object
    HonorificSummary:
      allOf:
      - $ref: '#/components/schemas/HonorificReference'
      - $ref: '#/components/schemas/HonorificSummary_allOf'
      description: Summary information for the honorific
      type: object
    HonorificReference:
      description: Reference information for the Honorific containing id, name
      properties:
        id:
          description: Unique identifier of each honorific
          example: 4eb62cb48c9f429c93bc26664c1a5a4d
          type: string
        name:
          description: Name of the honorific.
          example: Mr
          type: string
      type: object
    EmployeeRetirementSavingPage:
      description: A wrapper for the Employees Retirement Savings in Australia ( later
        to include NZ )
      example:
        au:
          data:
          - cursor: asdfgflkj
            retrieveLink: /accounts/87ujhygt5mnbgtsiw7jdhdff60/employees/4eb62cb48c9f429c93bc26664c1a12345
          - cursor: asdfgflkj
            retrieveLink: /accounts/87ujhygt5mnbgtsiw7jdhdff60/employees/4eb62cb48c9f429c93bc26664c1a12345
          pageInfo:
            hasNextPage: true
            hasPreviousPage: true
            endCursor: asdfgflkj
            startCursor: asdfgflkj
      properties:
        au:
          $ref: '#/components/schemas/EmployeeSuperFundPage'
      type: object
    EmployeeSuperFundPage:
      description: A wrapper for the Employees Retirement Saving which includes pagination
        information and an array of RetirementSavings
      example:
        data:
        - cursor: asdfgflkj
          retrieveLink: /accounts/87ujhygt5mnbgtsiw7jdhdff60/employees/4eb62cb48c9f429c93bc26664c1a12345
        - cursor: asdfgflkj
          retrieveLink: /accounts/87ujhygt5mnbgtsiw7jdhdff60/employees/4eb62cb48c9f429c93bc26664c1a12345
        pageInfo:
          hasNextPage: true
          hasPreviousPage: true
          endCursor: asdfgflkj
          startCursor: asdfgflkj
      properties:
        pageInfo:
          $ref: '#/components/schemas/PageInfo'
        data:
          description: An array of employee's retirement savings
          items:
            $ref: '#/components/schemas/EmployeeSuperFundPage_data'
          type: array
      type: object
    EmployeeSuperFundSummary:
      allOf:
      - $ref: '#/components/schemas/EmployeeRetirementSavingReferenceAU'
      - $ref: '#/components/schemas/EmployeeSuperFundSummary_allOf'
      description: Summary information for the employee's retirement saving
      type: object
    EmployeeRetirementSavingReferenceAU:
      description: Contains common information across all employee's retirement savings
      properties:
        id:
          description: Unique identifier of an employee's retirement savings
          example: 4eb62cb48c9f429c93bc26664c1a5a4d
          type: string
      type: object
    EmployeeTaxDetailsInput:
      description: Detailed tax details information for the employee
      example:
        au:
          hecsSupported: true
          studentStartupLoan: true
          tradeLoanSupport: true
          exemptType: UNQUOTED
          approvedWithholdingVariationPercentage: "18.5"
          eligibleToReceiveLeaveLoading: true
          taxFreeThresholdClaimed: true
          financialSupplementDebt: true
          residencyStatus: AUSTRALIAN_RESIDENT
          upwardVariationRequested: true
          australianResidentForTaxPurposes: true
          otherTaxOffsetClaimed: true
          hasApprovedWithholdingVariation: true
          increasedTaxWithholdingAmountInCents: 12345
          offsetEstimatedAmountInCents: 12345
          tfn: "633098123"
          employmentBasis: FULL_TIME
      properties:
        au:
          $ref: '#/components/schemas/EmployeeTaxDetailsInputAU'
      type: object
    EmployeeTaxDetailsInputAU:
      description: Detailed tax details information for the employee in Australia
      example:
        hecsSupported: true
        studentStartupLoan: true
        tradeLoanSupport: true
        exemptType: UNQUOTED
        approvedWithholdingVariationPercentage: "18.5"
        eligibleToReceiveLeaveLoading: true
        taxFreeThresholdClaimed: true
        financialSupplementDebt: true
        residencyStatus: AUSTRALIAN_RESIDENT
        upwardVariationRequested: true
        australianResidentForTaxPurposes: true
        otherTaxOffsetClaimed: true
        hasApprovedWithholdingVariation: true
        increasedTaxWithholdingAmountInCents: 12345
        offsetEstimatedAmountInCents: 12345
        tfn: "633098123"
        employmentBasis: FULL_TIME
      properties:
        tfn:
          description: Tax File Number
          example: "633098123"
          maxLength: 64
          nullable: true
          type: string
        exemptType:
          $ref: '#/components/schemas/ExemptTypes'
        employmentBasis:
          $ref: '#/components/schemas/EmploymentBasis'
        residencyStatus:
          $ref: '#/components/schemas/ResidencyStatuses'
        taxFreeThresholdClaimed:
          description: Tax Free Threshold Claimed
          example: true
          nullable: true
          type: boolean
        tradeLoanSupport:
          description: Trade Loan Support
          example: true
          nullable: true
          type: boolean
        hecsSupported:
          description: Hecs Supported
          example: true
          nullable: true
          type: boolean
        studentStartupLoan:
          description: Student Startup Loan
          example: true
          nullable: true
          type: boolean
        financialSupplementDebt:
          description: Financial Supplement Debt
          example: true
          nullable: true
          type: boolean
        australianResidentForTaxPurposes:
          description: Australian Resident for Tax Purposes
          example: true
          nullable: true
          type: boolean
        eligibleToReceiveLeaveLoading:
          description: Eligible To Receive Leave Loading
          example: true
          nullable: true
          type: boolean
        otherTaxOffsetClaimed:
          description: Other Tax Offset Claimed
          example: true
          nullable: true
          type: boolean
        offsetEstimatedAmountInCents:
          description: Other Tax Offset Claimed (in Cents)
          example: 12345
          nullable: true
          type: integer
        upwardVariationRequested:
          description: Upward Variation Requested
          example: true
          nullable: true
          type: boolean
        increasedTaxWithholdingAmountInCents:
          description: Increased Tax Withholding Amount
          example: 12345
          nullable: true
          type: integer
        hasApprovedWithholdingVariation:
          description: Has Approved Withholding Variation
          example: true
          nullable: true
          type: boolean
        approvedWithholdingVariationPercentage:
          description: Approved Withholding Variation Percentage
          example: "18.5"
          nullable: true
          type: string
      type: object
    ExemptTypes:
      description: A list of all Exempt Types in a tax detail.
      enum:
      - UNQUOTED
      - PENDING
      - UNDER18
      - PENSIONER
      example: UNQUOTED
      type: string
    EmploymentBasis:
      description: A list of all Employment Basis' in a tax detail.
      enum:
      - FULL_TIME
      - PART_TIME
      - CASUAL
      - LABOUR_HIRE
      - SUPER_INCOME_STREAM
      example: FULL_TIME
      type: string
    ResidencyStatuses:
      description: A list of all Residency Statuses in a tax detail.
      enum:
      - AUSTRALIAN_RESIDENT
      - FOREIGN_RESIDENT
      - WORKING_HOLIDAY_MAKER
      example: AUSTRALIAN_RESIDENT
      type: string
    EmployeeTaxDetails:
      description: Detailed tax details information for the employee
      example:
        au:
          dateUpdatedUTC: 1997-07-16T19:20:30.45+01:00
          hecsSupported: true
          studentStartupLoan: true
          tradeLoanSupport: true
          exemptType: UNQUOTED
          approvedWithholdingVariationPercentage: "18.5"
          eligibleToReceiveLeaveLoading: true
          taxFreeThresholdClaimed: true
          financialSupplementDebt: true
          residencyStatus: AUSTRALIAN_RESIDENT
          upwardVariationRequested: true
          australianResidentForTaxPurposes: true
          otherTaxOffsetClaimed: true
          hasApprovedWithholdingVariation: true
          increasedTaxWithholdingAmountInCents: 12345
          offsetEstimatedAmountInCents: 12345
          tfn: "633098123"
          dateCreatedUTC: 1997-07-16T19:20:30.45+01:00
          employmentBasis: FULL_TIME
        id: 4eb62cb48c9f429c93bc26664c1a5a4d
      properties:
        id:
          description: Tax Details ID of the employee
          example: 4eb62cb48c9f429c93bc26664c1a5a4d
          maxLength: 64
          minLength: 1
          type: string
        au:
          $ref: '#/components/schemas/EmployeeTaxDetailsAU'
      type: object
    EmployeeTaxDetailsAU:
      description: Detailed tax details information for the employee in Australia
      example:
        dateUpdatedUTC: 1997-07-16T19:20:30.45+01:00
        hecsSupported: true
        studentStartupLoan: true
        tradeLoanSupport: true
        exemptType: UNQUOTED
        approvedWithholdingVariationPercentage: "18.5"
        eligibleToReceiveLeaveLoading: true
        taxFreeThresholdClaimed: true
        financialSupplementDebt: true
        residencyStatus: AUSTRALIAN_RESIDENT
        upwardVariationRequested: true
        australianResidentForTaxPurposes: true
        otherTaxOffsetClaimed: true
        hasApprovedWithholdingVariation: true
        increasedTaxWithholdingAmountInCents: 12345
        offsetEstimatedAmountInCents: 12345
        tfn: "633098123"
        dateCreatedUTC: 1997-07-16T19:20:30.45+01:00
        employmentBasis: FULL_TIME
      properties:
        tfn:
          description: Tax File Number
          example: "633098123"
          maxLength: 11
          nullable: true
          type: string
        exemptType:
          $ref: '#/components/schemas/ExemptTypes'
        employmentBasis:
          $ref: '#/components/schemas/EmploymentBasis'
        residencyStatus:
          $ref: '#/components/schemas/ResidencyStatuses'
        taxFreeThresholdClaimed:
          description: Tax Free Threshold Claimed
          example: true
          nullable: true
          type: boolean
        tradeLoanSupport:
          description: Trade Loan Support
          example: true
          nullable: true
          type: boolean
        hecsSupported:
          description: Hecs Supported
          example: true
          nullable: true
          type: boolean
        studentStartupLoan:
          description: Student Startup Loan
          example: true
          nullable: true
          type: boolean
        financialSupplementDebt:
          description: Financial Supplement Debt
          example: true
          nullable: true
          type: boolean
        australianResidentForTaxPurposes:
          description: Australian Resident for Tax Purposes
          example: true
          nullable: true
          type: boolean
        eligibleToReceiveLeaveLoading:
          description: Eligible To Receive Leave Loading
          example: true
          nullable: true
          type: boolean
        otherTaxOffsetClaimed:
          description: Other Tax Offset Claimed
          example: true
          nullable: true
          type: boolean
        offsetEstimatedAmountInCents:
          description: Other Tax Offset Claimed (in Cents)
          example: 12345
          nullable: true
          type: integer
        upwardVariationRequested:
          description: Upward Variation Requested
          example: true
          nullable: true
          type: boolean
        increasedTaxWithholdingAmountInCents:
          description: Increased Tax Withholding Amount (in Cents)
          example: 12345
          nullable: true
          type: integer
        hasApprovedWithholdingVariation:
          description: Has Approved Withholding Variation
          example: true
          nullable: true
          type: boolean
        approvedWithholdingVariationPercentage:
          description: Approved Withholding Variation Percentage
          example: "18.5"
          nullable: true
          type: string
        dateCreatedUTC:
          description: UTC time of when the tax detail was created. (format is YYYY-MM-DD
            HH:MM:SS)
          example: 1997-07-16T19:20:30.45+01:00
          type: string
        dateUpdatedUTC:
          description: UTC time of when the tax detail was updated. (format is YYYY-MM-DD
            HH:MM:SS)
          example: 1997-07-16T19:20:30.45+01:00
          type: string
      type: object
    PageInfo:
      example:
        hasNextPage: true
        hasPreviousPage: true
        endCursor: asdfgflkj
        startCursor: asdfgflkj
      properties:
        hasPreviousPage:
          description: |
            A boolean value set to true if there are items in a previous page.

            **Note:** For usage in a future release.
          example: true
          type: boolean
        hasNextPage:
          description: |
            A boolean value set to true if there are items in a following page.

            **Note:** For usage in a future release.
          example: true
          type: boolean
        endCursor:
          description: |
            An opaque identifier used to paginate.
            Provide this to get elements before or after this element.

            **Note**: For usage in a future release
          example: asdfgflkj
          type: string
        startCursor:
          description: |
            An opaque identifier used to paginate.
            Provide this to get elements before or after this element.

            **Note**: For usage in a future release
          example: asdfgflkj
          type: string
      type: object
    Cursor:
      description: |
        An opaque identifier used to paginate.
        Provide this to get elements before or after this element.

        **Note**: For usage in a future release
      example: asdfgflkj
      type: string
    RetrieveLink:
      description: A URI of the entity. This includes the account id and the entity
        id.
      example: /accounts/87ujhygt5mnbgtsiw7jdhdff60/employees/4eb62cb48c9f429c93bc26664c1a12345
      type: string
    AddressDetail:
      description: Summary information for the address
      example:
        country: Australia
        postcode: "2002"
        suburb: Sydney Town
        state: NSW
        line2: 1234 Pacific Highway
        line1: Suite 3
      properties:
        line1:
          description: Address Line 1
          example: Suite 3
          maxLength: 128
          type: string
        line2:
          description: Address Line 2
          example: 1234 Pacific Highway
          maxLength: 128
          type: string
        suburb:
          description: Suburb, Town or City
          example: Sydney Town
          maxLength: 128
          type: string
        state:
          description: Australian State, Territory, NZ Province
          example: NSW
          maxLength: 128
          type: string
        postcode:
          description: Australian or NZ postcode
          example: "2002"
          maxLength: 128
          type: string
        country:
          description: Australia, New Zealand.
          example: Australia
          maxLength: 128
          minLength: 1
          type: string
      type: object
    ContactDetail:
      description: Summary information for the contact
      properties:
        phone:
          description: Land line number may include the area code
          example: 08 4044 0404
          maxLength: 128
          nullable: true
          type: string
        mobile:
          description: Mobile phone number
          example: 0404 404 040
          maxLength: 128
          nullable: true
          type: string
        website:
          description: The URL for the website of this contact
          example: www.test.com
          maxLength: 128
          nullable: true
          type: string
        fax:
          description: Fax number for the contact may include area code
          example: (02) 2020 2020
          maxLength: 128
          nullable: true
          type: string
        email:
          description: Email address for the contact
          example: test@test.com
          maxLength: 128
          nullable: true
          type: string
      type: object
    Genders:
      description: A list of all Genders in an account.
      enum:
      - Male
      - Female
      - Non_Binary
      - Not_Stated
      example: Male
      type: string
    BranchesPage_data:
      example:
        cursor: asdfgflkj
        retrieveLink: /accounts/87ujhygt5mnbgtsiw7jdhdff60/employees/4eb62cb48c9f429c93bc26664c1a12345
      properties:
        cursor:
          description: |
            An opaque identifier used to paginate.
            Provide this to get elements before or after this element.

            **Note**: For usage in a future release
          example: asdfgflkj
          type: string
        retrieveLink:
          description: A URI of the entity. This includes the account id and the entity
            id.
          example: /accounts/87ujhygt5mnbgtsiw7jdhdff60/employees/4eb62cb48c9f429c93bc26664c1a12345
          type: string
        node:
          $ref: '#/components/schemas/BranchSummary'
    BranchSummary_allOf:
      properties:
        type:
          description: The type of branch setup in the account
          enum:
          - LegalEntity
          - Department
          example: LegalEntity
          nullable: true
          type: string
        address:
          $ref: '#/components/schemas/AddressDetail'
        dateCreatedUTC:
          description: UTC time of when the branch was created. (format is YYYY-MM-DD
            HH:MM:SS)
          example: “2019-01-08T11:09:45”
          type: string
        dateUpdatedUTC:
          description: UTC time of when the branch was updated. (format is YYYY-MM-DD
            HH:MM:SS)
          example: “2019-01-08T11:09:45”
          type: string
        parent:
          $ref: '#/components/schemas/BranchReference'
        children:
          description: An array of children branch. Each child branch contains an
            branch ID, name and path.
          items:
            $ref: '#/components/schemas/BranchReference'
          type: array
    BranchDetail_allOf:
      properties:
        type:
          description: The type of branch setup in the account
          enum:
          - LegalEntity
          - Department
          example: LegalEntity
          nullable: true
          type: string
        address:
          $ref: '#/components/schemas/AddressDetail'
        dateCreatedUTC:
          description: UTC time of when the branch was created. (format is YYYY-MM-DD
            HH:MM:SS)
          example: “2019-01-08T11:09:45”
          type: string
        dateUpdatedUTC:
          description: UTC time of when the branch was updated. (format is YYYY-MM-DD
            HH:MM:SS)
          example: “2019-01-08T11:09:45”
          type: string
        parent:
          $ref: '#/components/schemas/BranchReference'
        children:
          description: An array of children branch. Each child branch contains an
            branch ID, name and path.
          items:
            $ref: '#/components/schemas/BranchReference'
          type: array
        legalName:
          description: |
            The legal name for the branch provided when the branch was created in the system
          example: Jo's Industries Pty Ltd
          type: string
        tradingName:
          description: The name under which the branch is operating
          example: Jo's Plumbers North Sydney
          type: string
        businessNumber:
          description: This is the Australian Business Number for the branch.  NZ
            ??
          example: 123 456 789 01
          type: string
        testingBranch:
          description: |
            A boolean value of TRUE or FALSE if the branch is created for testing purposes only
          type: boolean
        branchNameWHSPortal:
          description: |
            By default, the WHS portal will show the full branch name {path} unless a different branch name is specified in this field.
          example: SM WHS Portal
          type: string
        branchNameApplicantPortal:
          description: |
            By default, the applicant portal will show the full branch name {path} unless a different branch name is specified in this field.
          example: SM Candidate Portal
          type: string
        contact:
          $ref: '#/components/schemas/ContactDetail'
    EmployeesPage_data:
      example:
        cursor: asdfgflkj
        retrieveLink: /accounts/87ujhygt5mnbgtsiw7jdhdff60/employees/4eb62cb48c9f429c93bc26664c1a12345
      properties:
        cursor:
          description: |
            An opaque identifier used to paginate.
            Provide this to get elements before or after this element.

            **Note**: For usage in a future release
          example: asdfgflkj
          type: string
        retrieveLink:
          description: A URI of the entity. This includes the account id and the entity
            id.
          example: /accounts/87ujhygt5mnbgtsiw7jdhdff60/employees/4eb62cb48c9f429c93bc26664c1a12345
          type: string
        node:
          $ref: '#/components/schemas/EmployeeSummary'
    EmployeeSummary_allOf:
      properties:
        firstName:
          description: First name of the employee
          example: Michael
          maxLength: 128
          nullable: false
          type: string
        surname:
          description: Surname or last name of the employee
          example: Johnson
          maxLength: 255
          nullable: false
          type: string
        dateOfBirth:
          description: Birthdate of the employees (accepted format is YYYY-MM-DD)
          example: 1974-05-21
          maxLength: 10
          pattern: ^\d{4}-\d{2}-\d{2}$
          type: string
        gender:
          $ref: '#/components/schemas/Genders'
        employmentType:
          $ref: '#/components/schemas/EmploymentTypes'
        ownerBranch:
          $ref: '#/components/schemas/BranchReference'
        employmentStatus:
          $ref: '#/components/schemas/EmploymentStatuses'
        dateCreatedUTC:
          description: UTC time of when the employee record was created. (format is
            YYYY-MM-DD HH:MM:SS)
          example: 1997-07-16T19:20:30.45+01:00
          type: string
        dateUpdatedUTC:
          description: UTC time of when the employee record was updated. (format is
            YYYY-MM-DD HH:MM:SS)
          example: 1997-07-16T19:20:30.45+01:00
          type: string
    EmployeeDetail_allOf:
      properties:
        firstName:
          description: First name of the employee
          example: Michael
          maxLength: 128
          nullable: false
          type: string
        surname:
          description: Surname or last name of the employee
          example: Johnson
          maxLength: 255
          nullable: false
          type: string
        dateOfBirth:
          description: Birthdate of the employees (accepted format is YYYY-MM-DD)
          example: 1974-05-21
          maxLength: 10
          pattern: ^\d{4}-\d{2}-\d{2}$
          type: string
        employmentType:
          $ref: '#/components/schemas/EmploymentTypes'
        ownerBranch:
          $ref: '#/components/schemas/BranchReference'
        employmentStatus:
          $ref: '#/components/schemas/EmploymentStatuses'
        dateCreatedUTC:
          description: UTC time of when the employee record was created. (format is
            YYYY-MM-DD HH:MM:SS)
          example: 1997-07-16T19:20:30.45+01:00
          type: string
        dateUpdatedUTC:
          description: UTC time of when the employee record was updated. (format is
            YYYY-MM-DD HH:MM:SS)
          example: 1997-07-16T19:20:30.45+01:00
          type: string
        title:
          description: Title of an employee. From honorifics list
          example: Mr
          maxLength: 128
          type: string
        middleName:
          description: Middle name of the employee
          example: K
          maxLength: 255
          type: string
        preferredName:
          description: Preferred name of the employee
          example: Mike
          maxLength: 255
          type: string
        nickname:
          description: Nick name of the employee
          example: Mickey
          maxLength: 128
          type: string
        personalAddress:
          $ref: '#/components/schemas/AddressDetail'
        postalAddress:
          $ref: '#/components/schemas/AddressDetail'
        contacts:
          $ref: '#/components/schemas/EmployeeContactDetail'
        gender:
          $ref: '#/components/schemas/Genders'
        positionTitle:
          description: The title of the position associated to the employee (Manager,
            CTO, CEO)
          example: Manager
          maxLength: 255
          type: string
        commencementDate:
          description: Start date of the employment (accepted format is YYYY-MM-DD)
          example: 2020-07-01
          maxLength: 10
          pattern: ^\d{4}-\d{2}-\d{2}$
          type: string
        endDate:
          description: Termination date of the employee if the employee status is
            Terminating or Terminated (accepted format is YYYY-MM-DD)
          example: 2017-12-25
          type: string
        linkedBranches:
          description: Name of the branches that the employee is linked other than
            ownerBranch. Includes ID, name and path of the branch.
          items:
            $ref: '#/components/schemas/BranchReference'
          type: array
        newEmployeeId:
          description: When an employee is transferred they are given a new employee
            id. This field is only returned when an employee is transferred.
          example: asdfgfqwerty
          type: string
        oldEmployeeId:
          description: This is the employeeId of an employee prior to his transfer.
            This field is returned only if the employee has been transferred.
          example: lkjhjlkjhl
          type: string
    EmploymentStatusesPage_data:
      example:
        cursor: asdfgflkj
      properties:
        cursor:
          description: |
            An opaque identifier used to paginate.
            Provide this to get elements before or after this element.

            **Note**: For usage in a future release
          example: asdfgflkj
          type: string
        node:
          $ref: '#/components/schemas/EmploymentStatusSummary'
    EmploymentStatusSummary_allOf:
      properties:
        description:
          description: Description for the Employment Status
          example: Current
          type: string
        dateCreatedUTC:
          description: UTC time of when the employment status was created. (format
            is YYYY-MM-DD HH:MM:SS)
          example: 1997-07-16T19:20:30.45+01:00
          type: string
        dateUpdatedUTC:
          description: UTC time of when the employment type was updated. (format is
            YYYY-MM-DD HH:MM:SS)
          example: 1997-07-16T19:20:30.45+01:00
          type: string
    EmploymentTypesPage_data:
      example:
        cursor: asdfgflkj
      properties:
        cursor:
          description: |
            An opaque identifier used to paginate.
            Provide this to get elements before or after this element.

            **Note**: For usage in a future release
          example: asdfgflkj
          type: string
        node:
          $ref: '#/components/schemas/EmploymentTypeSummary'
    EmploymentTypeSummary_allOf:
      properties:
        description:
          description: Description of the employment type
          example: Permanent (Full Time)
          type: string
        dateCreatedUTC:
          description: UTC time of when the employment type was created. (format is
            YYYY-MM-DD HH:MM:SS)
          example: 1997-07-16T19:20:30.45+01:00
          type: string
        dateUpdatedUTC:
          description: UTC time of when the employment type was updated. (format is
            YYYY-MM-DD HH:MM:SS)
          example: 1997-07-16T19:20:30.45+01:00
          type: string
    GendersPage_data:
      example:
        cursor: asdfgflkj
      properties:
        cursor:
          description: |
            An opaque identifier used to paginate.
            Provide this to get elements before or after this element.

            **Note**: For usage in a future release
          example: asdfgflkj
          type: string
        node:
          $ref: '#/components/schemas/GenderSummary'
    GenderSummary_allOf:
      properties:
        description:
          description: Details of Gender
          example: A male person
          type: string
        dateCreatedUTC:
          description: UTC time of when the gender was created. (format is YYYY-MM-DD
            HH:MM:SS)
          example: 1997-07-16T19:20:30.45+01:00
          type: string
        dateUpdatedUTC:
          description: UTC time of when the gender was updated. (format is YYYY-MM-DD
            HH:MM:SS)
          example: 1997-07-16T19:20:30.45+01:00
          type: string
    HonorificsPage_data:
      example:
        cursor: asdfgflkj
      properties:
        cursor:
          description: |
            An opaque identifier used to paginate.
            Provide this to get elements before or after this element.

            **Note**: For usage in a future release
          example: asdfgflkj
          type: string
        node:
          $ref: '#/components/schemas/HonorificSummary'
    HonorificSummary_allOf:
      properties:
        description:
          description: Description of the honorific
          example: Mr
          type: string
        dateCreatedUTC:
          description: UTC time of when the honorific was created. (format is YYYY-MM-DD
            HH:MM:SS)
          example: 1997-07-16T19:20:30.45+01:00
          type: string
        dateUpdatedUTC:
          description: UTC time of when the honorific was updated. (format is YYYY-MM-DD
            HH:MM:SS)
          example: 1997-07-16T19:20:30.45+01:00
          type: string
    EmployeeSuperFundPage_data:
      example:
        cursor: asdfgflkj
        retrieveLink: /accounts/87ujhygt5mnbgtsiw7jdhdff60/employees/4eb62cb48c9f429c93bc26664c1a12345
      properties:
        cursor:
          description: |
            An opaque identifier used to paginate.
            Provide this to get elements before or after this element.

            **Note**: For usage in a future release
          example: asdfgflkj
          type: string
        retrieveLink:
          description: A URI of the entity. This includes the account id and the entity
            id.
          example: /accounts/87ujhygt5mnbgtsiw7jdhdff60/employees/4eb62cb48c9f429c93bc26664c1a12345
          type: string
        node:
          $ref: '#/components/schemas/EmployeeSuperFundSummary'
    EmployeeSuperFundSummary_allOf:
      properties:
        memberNumber:
          description: Unique number assigned by the company to identify employee
            within an account
          example: abc098ijn176
          minLength: 1
          nullable: false
          type: string
        type:
          $ref: '#/components/schemas/EmployeeSuperFundTypes'
        name:
          description: Name of the retirement saving
          example: Johnson
          maxLength: 255
          minLength: 1
          nullable: false
          type: string
        abn:
          description: ABN of the retirement saving
          example: 65 714 394 898
          maxLength: 20
          minLength: 1
          nullable: false
          type: string
        esa:
          description: Electronic Service Address
          example: ESUPERFUND
          maxLength: 64
          nullable: true
          type: string
        usi:
          description: Retirement Saving ID (USI)
          example: STA0100AU
          maxLength: 64
          nullable: true
          type: string
        dateCreatedUTC:
          description: UTC time of when the retirement saving was created. (format
            is YYYY-MM-DD HH:MM:SS)
          example: 1997-07-16T19:20:30.45+01:00
          nullable: false
          type: string
        dateUpdatedUTC:
          description: UTC time of when the retirement saving was updated. (format
            is YYYY-MM-DD HH:MM:SS)
          example: 1997-07-16T19:20:30.45+01:00
          nullable: false
          type: string
  securitySchemes:
    OAuth2:
      flows:
        authorizationCode:
          authorizationUrl: https://login.enablehr.com/oauth/authorize
          refreshUrl: https://login.enablehr.com/oauth/token
          scopes:
            read:accounts:referencedata: Grant read access to reference data (branches,
              genders, honorifics, employment types and employment statuses)
            manage:accounts:referencedata: Grant create and update access to reference
              data (branches, genders, honorifics, employment types and employment
              statuses)
            read:employees: Grant read access to employees
            manage:employees: Grant create and update access to employees
          tokenUrl: https://login.enablehr.com/oauth/token
      type: oauth2
